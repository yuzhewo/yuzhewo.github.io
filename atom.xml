<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[幻城]]></title>
  <subtitle><![CDATA[虚幻世界中的一员]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.yuzhewo.com/"/>
  <updated>2015-11-21T09:23:28.000Z</updated>
  <id>http://www.yuzhewo.com/</id>
  
  <author>
    <name><![CDATA[yuzhewo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hexo程序archive页面数量设置]]></title>
    <link href="http://www.yuzhewo.com/2015/11/21/Hexo%E7%A8%8B%E5%BA%8Farchive%E9%A1%B5%E9%9D%A2%E6%95%B0%E9%87%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://www.yuzhewo.com/2015/11/21/Hexo程序archive页面数量设置/</id>
    <published>2015-11-21T08:51:50.000Z</published>
    <updated>2015-11-21T09:23:28.000Z</updated>
    <content type="html"><![CDATA[<p>使用Hexo搭建博客已经有一段时间了，当文章数量达到十几篇左右时，突然发觉archive归档页面仅显示10篇文章，并且出现了分页功能，对于我们这种个人博客，文章数量不会很多，所以更希望是在一页中完全展示出来，便于访问者查找感兴趣的文章。</p>
<p>在网上查找原因，发现此处的10条限制来自_config.yml文件中的配置，这个配置控制所有的分页配置，包括首页、归档页、tag分类页面。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">per_page</span>: <span class="string">10</span></span><br></pre></td></tr></table></figure></p>
<p>如果我们想对上面三个页面做独立的配置，需要安装插件进行功能支持。</p>
<ul>
<li><a href="https://github.com/hexojs/hexo-generator-index" target="_blank" rel="external">hexo-generator-index</a></li>
<li><a href="https://github.com/hexojs/hexo-generator-archive" target="_blank" rel="external">hexo-generator-archive</a></li>
<li><a href="https://github.com/hexojs/hexo-generator-tag" target="_blank" rel="external">hexo-generator-tag</a></li>
</ul>
<p>使用如下命令进行安装需要的插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>对应的_config.yml文件中添加如下配置<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">index_generator</span>:</span><br><span class="line">  <span class="attribute">per_page</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">archive_generator</span>:</span><br><span class="line">  <span class="attribute">per_page</span>: <span class="number">20</span>  <span class="comment">//为0时表示不分页全展示</span></span><br><span class="line">  <span class="attribute">yearly</span>: true  <span class="comment">//按年生成归档</span></span><br><span class="line">  <span class="attribute">monthly</span>: true <span class="comment">//按月生成归档</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">tag_generator</span>:</span><br><span class="line">  <span class="attribute">per_page</span>: <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意:上面归档设置中的按年或者按月，需要修改模板给出对应的链接入口，对于没有兴趣修改模板的同学，可以将此处设为false，减少生成页面时的工作量。</p>
</blockquote>
<p>参考网站：<br><a href="https://github.com/hexojs/hexo-generator-archive" target="_blank" rel="external">https://github.com/hexojs/hexo-generator-archive</a><br><a href="https://github.com/iissnan/hexo-theme-next/issues/30" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next/issues/30</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用Hexo搭建博客已经有一段时间了，当文章数量达到十几篇左右时，突然发觉archive归档页面仅显示10篇文章，并且出现了分页功能，对于我们这种个人博客，文章数量不会很多，所以更希望是在一页中完全展示出来，便于访问者查找感兴趣的文章。</p>
<p>在网上查找原因，发现此]]>
    </summary>
    
      <category term="Hexo" scheme="http://www.yuzhewo.com/tags/Hexo/"/>
    
      <category term="archive" scheme="http://www.yuzhewo.com/tags/archive/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[npm切换淘宝镜像源]]></title>
    <link href="http://www.yuzhewo.com/2015/11/20/npm%E5%88%87%E6%8D%A2%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>http://www.yuzhewo.com/2015/11/20/npm切换淘宝镜像源/</id>
    <published>2015-11-20T01:45:48.000Z</published>
    <updated>2015-11-20T01:52:48.000Z</updated>
    <content type="html"><![CDATA[<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>
<p>1.通过config命令<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> https://<span class="keyword">registry</span>.npm.taobao.org </span><br><span class="line">npm <span class="keyword">info</span> underscore （如果上面配置正确这个命令会有字符串response）</span><br></pre></td></tr></table></figure></p>
<p>2.命令行指定<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">npm</span> --registry <span class="url">https://registry.npm.taobao.org</span> <span class="built_in">info</span> underscore</span><br></pre></td></tr></table></figure></p>
<p>3.编辑 ~/.npmrc 加入下面内容<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry = <span class="string">https:</span><span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>对于暂时切换源可选用第二种方式，如果想永久生效可使用第一种和第三种方式，两种方式其实等同。永久生效后如果想暂时切换原来的源地址，可以到.npmrc中把配置暂时删除后运行命令。</p>
</blockquote>
<p>原文地址：<br><a href="https://cnodejs.org/topic/4f9904f9407edba21468f31e" target="_blank" rel="external">https://cnodejs.org/topic/4f9904f9407edba21468f31e</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>
<p>1.通过config命令<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre>]]>
    </summary>
    
      <category term="nodejs" scheme="http://www.yuzhewo.com/tags/nodejs/"/>
    
      <category term="npm" scheme="http://www.yuzhewo.com/tags/npm/"/>
    
      <category term="taobao" scheme="http://www.yuzhewo.com/tags/taobao/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速了解和学习Unix/Linux下Shell（二）]]></title>
    <link href="http://www.yuzhewo.com/2015/11/12/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AD%A6%E4%B9%A0Unix-Linux%E4%B8%8BShell%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.yuzhewo.com/2015/11/12/快速了解和学习Unix-Linux下Shell（二）/</id>
    <published>2015-11-12T15:45:49.000Z</published>
    <updated>2015-11-20T10:55:07.000Z</updated>
    <content type="html"><![CDATA[<p>这篇文章是快速了解和学习Unix/Linux下Shell的第二部分，前一部分参考<a href="/2015/11/05/快速了解和学习Unix-Linux下Shell（一）/">快速了解和学习Unix/Linux下Shell（一）</a>。</p>
<h3 id="一、Shell转义及变量替换">一、Shell转义及变量替换</h3><h4 id="1-转义字符、变量、命令替换">1.转义字符、变量、命令替换</h4><p>如果表达式中包含转义字符，Shell会把转义字符替换成对应的含义。如果表达式中包含被双引号括住的变量，Shell使用变量值替换变量名，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"Value of a is <span class="variable">$a</span> \n"</span></span><br></pre></td></tr></table></figure>
<p>注意:echo的选项-e代表对转义字符进行替换，-E代表不替换转义字符（默认情况），-n代表禁止替换换行符，以上命令会得到下面结果，<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Value <span class="keyword">of</span> a <span class="keyword">is</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>如果不使用-e选项则得到：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Value <span class="keyword">of</span> a <span class="keyword">is</span> <span class="number">10</span><span class="string">\n</span></span><br></pre></td></tr></table></figure></p>
<p>下表是在shell中可以使用的转义字符及含义</p>
<pre>转义字符    含义
\\  反斜杠
\a  警报，响铃
\b  退格（删除键）
\f  换页(FF)，将当前位置移到下页开头
\n  换行
\r  回车
\t  水平制表符（tab键） 
\v  垂直制表符
</pre>

<h4 id="2-命令返回值替换">2.命令返回值替换</h4><p>命令返回值替换是指Shell将命令执行的结果保存在变量中，然后在适当的地方输出，语法是：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="command"><span class="keyword">command</span>`</span></span><br></pre></td></tr></table></figure>
<p>注意上面的引号不是[‘]而是[`]（即TAB上方ESC下方那个键）。下面是命令替换的几个例子。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">DATE=`date`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Date is <span class="variable">$DATE</span>"</span></span><br><span class="line"></span><br><span class="line">USERS=`who | wc <span class="operator">-l</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Logged in user are <span class="variable">$USERS</span>"</span></span><br><span class="line"></span><br><span class="line">UP=`date ; uptime`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Uptime is <span class="variable">$UP</span>"</span></span><br></pre></td></tr></table></figure>
<p>运行结果为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date is Thu Jul  <span class="number">2</span> <span class="number">03</span>:<span class="number">59</span>:<span class="number">57</span> MST <span class="number">2009</span></span><br><span class="line">Logged in user are <span class="number">1</span></span><br><span class="line">Uptime is Thu Jul  <span class="number">2</span> <span class="number">03</span>:<span class="number">59</span>:<span class="number">57</span> MST <span class="number">2009</span></span><br><span class="line"><span class="number">03</span>:<span class="number">59</span>:<span class="number">57</span> up <span class="number">20</span> days, <span class="number">14</span>:<span class="number">03</span>,  <span class="number">1</span> user,  load avg: <span class="number">0.13</span>, <span class="number">0.07</span>, <span class="number">0.15</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-变量状态替换">3.变量状态替换</h4><p>变量状态替换可以根据变量的状态（是否为空、是否定义等）来改变它的值，请参考下表：</p>
<pre>形式             说明
${var}          变量本来的值
${var:-word}    如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值
${var:=word}    如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word
${var:?message} 如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值。
若此替换出现在Shell脚本中，那么脚本将停止运行
${var:+word}    如果变量 var 被定义，那么返回 word，但不改变 var 的值
</pre>

<p>变量状态替换参考示例以及运行结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:-"Variable is not set"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1 - Value of var is <span class="variable">$&#123;var&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:="Variable is not set"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2 - Value of var is <span class="variable">$&#123;var&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> var</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:+"This is default value"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"3 - Value of var is <span class="variable">$var</span>"</span></span><br><span class="line"></span><br><span class="line">var=<span class="string">"Prefix"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:+"This is default value"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"4 - Value of var is <span class="variable">$var</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:?"Print this message"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"5 - Value of var is <span class="variable">$&#123;var&#125;</span>"</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Variable is not <span class="operator"><span class="keyword">set</span></span><br><span class="line"><span class="number">1</span> - <span class="keyword">Value</span> <span class="keyword">of</span> <span class="keyword">var</span> <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Variable</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">set</span></span><br><span class="line"><span class="number">2</span> - <span class="keyword">Value</span> <span class="keyword">of</span> <span class="keyword">var</span> <span class="keyword">is</span> <span class="keyword">Variable</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> - <span class="keyword">Value</span> <span class="keyword">of</span> <span class="keyword">var</span> <span class="keyword">is</span></span><br><span class="line">This <span class="keyword">is</span> <span class="keyword">default</span> <span class="keyword">value</span></span><br><span class="line"><span class="number">4</span> - <span class="keyword">Value</span> <span class="keyword">of</span> <span class="keyword">var</span> <span class="keyword">is</span> Prefix</span><br><span class="line">Prefix</span><br><span class="line"><span class="number">5</span> - <span class="keyword">Value</span> <span class="keyword">of</span> <span class="keyword">var</span> <span class="keyword">is</span> Prefix</span></span><br></pre></td></tr></table></figure>
<h3 id="二、Shell运算符：Shell算数运算符、关系运算符、布尔运算符、字符串运算符等">二、Shell运算符：Shell算数运算符、关系运算符、布尔运算符、字符串运算符等</h3><p>Bash 支持很多运算类型：算数运算、关系运算、布尔运算、字符串运算和文件测试运算。原生bash不支持简单的数学运算，但是可以通过系统命令实现，常用的如：awk、expr等.其中expr 最常用，expr是linux系统中常用的表达式计算工具可以完成表达式求值操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br></pre></td></tr></table></figure></p>
<p>#表达式相加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val=`expr <span class="number">2</span> + <span class="number">2</span>`</span><br></pre></td></tr></table></figure>
<p>#结果为 4</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Total value : <span class="variable">$val</span>"</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<blockquote>
<p>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2。<br>表达式要使用` `括住，注意这个字符不是单引号，而是TAB上方 Esc 下方的`。</p>
</blockquote>
<h4 id="1-算术运算">1.算术运算</h4><p>下面的示例是使用expr实现算数运算的示例，需要注意：</p>
<p>乘号(*)前边必须加反斜杠(\)才能实现乘法运算；<br>if…then…fi 是条件语句。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line">val=`expr <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a + b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a - b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a * b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> / <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b / a : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> % <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b % a : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"a is equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"a is not equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">a</span> + b : <span class="number">30</span></span><br><span class="line"><span class="operator">a</span> - b : -<span class="number">10</span></span><br><span class="line"><span class="operator">a</span> * b : <span class="number">200</span></span><br><span class="line">b / <span class="operator">a</span> : <span class="number">2</span></span><br><span class="line">b % <span class="operator">a</span> : <span class="number">0</span></span><br><span class="line"><span class="operator">a</span> is <span class="operator">not</span> equal <span class="built_in">to</span> b</span><br></pre></td></tr></table></figure></p>
<p>算数运算符列表：</p>
<pre>运算符        说明      举例
+          加法      `expr $a + $b` 结果为 30
-          减法      `expr $a - $b` 结果为 10
\*          乘法     `expr $a \* $b` 结果为  200
/           除法     `expr $b / $a` 结果为 2
%           取余     `expr $b % $a` 结果为 0
=           赋值     a=$b 将把变量 b 的值赋给 a
==          相等。   用于比较两个数字，相同则返回 true。 [ $a == $b ] 返回 false
!=          不相等。  用于比较两个数字，不相同则返回 true。   [ $a != $b ] 返回 true
</pre>

<p>注意：条件表达式要放在方括号之间，并且要有空格，例如 [$a==$b] 是错误的，必须写成 [ $a == $b ]。</p>
<h4 id="2-关系运算">2.关系运算</h4><p>关系运算符只支持数字或者字符串形式的数字，不支持包含非数字的字符串，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-eq</span> <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -eq <span class="variable">$b</span> : a is equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -eq <span class="variable">$b</span>: a is not equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-ne</span> <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ne <span class="variable">$b</span>: a is not equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ne <span class="variable">$b</span> : a is equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-gt</span> <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -gt <span class="variable">$b</span>: a is greater than b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -gt <span class="variable">$b</span>: a is not greater than b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-lt</span> <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt <span class="variable">$b</span>: a is less than b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt <span class="variable">$b</span>: a is not less than b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ge <span class="variable">$b</span>: a is greater or  equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ge <span class="variable">$b</span>: a is not greater or equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -le <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -le <span class="variable">$b</span>: a is less or  equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -le <span class="variable">$b</span>: a is not less or equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> -eq <span class="number">20</span>: a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">equal</span> <span class="keyword">to</span> b</span><br><span class="line"><span class="number">10</span> -ne <span class="number">20</span>: a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">equal</span> <span class="keyword">to</span> b</span><br><span class="line"><span class="number">10</span> -gt <span class="number">20</span>: a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">greater than</span> b</span><br><span class="line"><span class="number">10</span> -lt <span class="number">20</span>: a <span class="keyword">is</span> <span class="keyword">less than</span> b</span><br><span class="line"><span class="number">10</span> -ge <span class="number">20</span>: a <span class="keyword">is</span> <span class="keyword">not</span> greater <span class="keyword">or</span> <span class="keyword">equal</span> <span class="keyword">to</span> b</span><br><span class="line"><span class="number">10</span> -le <span class="number">20</span>: a <span class="keyword">is</span> less <span class="keyword">or</span>  <span class="keyword">equal</span> <span class="keyword">to</span> b</span><br></pre></td></tr></table></figure></p>
<p>关系运算符列表：</p>
<pre>运算符        说明                                      举例
-eq     检测两个数是否相等，相等返回 true。                 [ $a -eq $b ] 返回 true
-ne     检测两个数是否相等，不相等返回 true。               [ $a -ne $b ] 返回 true
-gt     检测左边的数是否大于右边的，如果是，则返回 true。     [ $a -gt $b ] 返回 false
-lt     检测左边的数是否小于右边的，如果是，则返回 true。     [ $a -lt $b ] 返回 true
-ge     检测左边的数是否大等于右边的，如果是，则返回 true。   [ $a -ge $b ] 返回 false
-le     检测左边的数是否小于等于右边的，如果是，则返回 true。  [ $a -le $b ] 返回 true
</pre>

<h4 id="3-布尔运算">3.布尔运算</h4><p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span> : a is not equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span>: a is equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-lt</span> <span class="number">100</span> <span class="operator">-a</span> <span class="variable">$b</span> <span class="operator">-gt</span> <span class="number">15</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 : returns true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 : returns false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-lt</span> <span class="number">100</span> -o <span class="variable">$b</span> <span class="operator">-gt</span> <span class="number">100</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 : returns true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 : returns false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-lt</span> <span class="number">5</span> -o <span class="variable">$b</span> <span class="operator">-gt</span> <span class="number">100</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 : returns true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 : returns false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> != <span class="number">20</span> : a is not equal to b</span><br><span class="line"><span class="number">10</span> -lt <span class="number">100</span> -a <span class="number">20</span> -gt <span class="number">15</span> : returns <span class="literal">true</span></span><br><span class="line"><span class="number">10</span> -lt <span class="number">100</span> -o <span class="number">20</span> -gt <span class="number">100</span> : returns <span class="literal">true</span></span><br><span class="line"><span class="number">10</span> -lt <span class="number">5</span> -o <span class="number">20</span> -gt <span class="number">100</span> : returns <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>布尔运算符列表：</p>
<pre>运算符    说明                                              举例
!       非运算，表达式为 true 则返回 false，否则返回 true。  [ ! false ] 返回 true。
-o      或运算，有一个表达式为 true 则返回 true。              [ $a -lt 20 -o $b -gt 100 ] 返回 true
-a      与运算，两个表达式都为 true 才返回 true。          [ $a -lt 20 -a $b -gt 100 ] 返回 false</pre>

<h4 id="4-字符串运算">4.字符串运算</h4><p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">a=<span class="string">"abc"</span></span><br><span class="line">b=<span class="string">"efg"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span> : a is equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span>: a is not equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span> : a is not equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span>: a is equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : string length is zero"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : string length is not zero"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : string length is not zero"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : string length is zero"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : string is not empty"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : string is empty"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abc = efg: a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">equal</span> <span class="keyword">to</span> b</span><br><span class="line">abc != efg : a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">equal</span> <span class="keyword">to</span> b</span><br><span class="line">-z abc : <span class="type">string</span> <span class="property">length</span> <span class="keyword">is</span> <span class="keyword">not</span> zero</span><br><span class="line">-n abc : <span class="type">string</span> <span class="property">length</span> <span class="keyword">is</span> <span class="keyword">not</span> zero</span><br><span class="line">abc : <span class="type">string</span> <span class="keyword">is</span> <span class="keyword">not</span> empty</span><br></pre></td></tr></table></figure></p>
<p>字符串运算符列表：</p>
<pre>运算符    说明                              举例
=       检测两个字符串是否相等，相等返回 true。  [ $a = $b ] 返回 false
!=      检测两个字符串是否相等，不相等返回 true。 [ $a != $b ] 返回 true
-z      检测字符串长度是否为0，为0返回 true。  [ -z $a ] 返回 false
-n      检测字符串长度是否为0，不为0返回 true。 [ -z $a ] 返回 true
str     检测字符串是否为空，不为空返回 true。   [ $a ] 返回 true</pre>

<h4 id="5、文件测试运算符">5、文件测试运算符</h4><p>可以通过文件测试运算符来依据文件的各种属性检测Unix/Linux文件。<br>例如，变量 file 表示文件“/var/www/tutorialspoint/unix/test.sh”，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">file=<span class="string">"/var/www/tutorialspoint/unix/test.sh"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File has read access"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File does not have read access"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File has write permission"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File does not have write permission"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File has execute permission"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File does not have execute permission"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-f</span> <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File is an ordinary file"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"This is sepcial file"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File is a directory"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"This is not a directory"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-s</span> <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File size is zero"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File size is not zero"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-e</span> <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File exists"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File does not exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File has read access</span><br><span class="line">File has write permission</span><br><span class="line">File has <span class="operator"><span class="keyword">execute</span> permission</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">is</span> an ordinary <span class="keyword">file</span></span><br><span class="line">This <span class="keyword">is</span> <span class="keyword">not</span> a <span class="keyword">directory</span></span><br><span class="line"><span class="keyword">File</span> <span class="keyword">size</span> <span class="keyword">is</span> zero</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">exists</span></span></span><br></pre></td></tr></table></figure></p>
<p>文件测试运算符列表：</p>
<pre>操作符            说明                                          举例
-b file     检测文件是否是块设备文件，如果是，则返回 true。      [ -b $file ] 返回 false
-c file     检测文件是否是字符设备文件，如果是，则返回 true。     [ -b $file ] 返回 false
-d file     检测文件是否是目录，如果是，则返回 true。             [ -d $file ] 返回 false
-f file     检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。    [ -f $file ] 返回 true
-g file     检测文件是否设置了 SGID 位，如果是，则返回 true。      [ -g $file ] 返回 false
-k file     检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。  [ -k $file ] 返回 false
-p file     检测文件是否是具名管道，如果是，则返回 true。           [ -p $file ] 返回 false
-u file     检测文件是否设置了 SUID 位，如果是，则返回 true。      [ -u $file ] 返回 false
-r file     检测文件是否可读，如果是，则返回 true。              [ -r $file ] 返回 true
-w file     检测文件是否可写，如果是，则返回 true。              [ -w $file ] 返回 true
-x file     检测文件是否可执行，如果是，则返回 true。             [ -x $file ] 返回 true
-s file     检测文件是否为空（文件大小是否大于0），不为空返回 true。 [ -s $file ] 返回 true
-e file     检测文件（包括目录）是否存在，如果是，则返回 true。    [ -e $file ] 返回 true
</pre>

<p>原文链接：<br><a href="http://www.4byte.cn/learning/119986/kuai-su-liao-jie-he-xue-xi-unix-linux-xia-shell-er.html" target="_blank" rel="external">http://www.4byte.cn/learning/119986/kuai-su-liao-jie-he-xue-xi-unix-linux-xia-shell-er.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章是快速了解和学习Unix/Linux下Shell的第二部分，前一部分参考<a href="/2015/11/05/快速了解和学习Unix-Linux下Shell（一）/">快速了解和学习Unix/Linux下Shell（一）</a>。</p>
<h3 id="一、S]]>
    </summary>
    
      <category term="linux" scheme="http://www.yuzhewo.com/tags/linux/"/>
    
      <category term="shell" scheme="http://www.yuzhewo.com/tags/shell/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS下通过yum命令安装mongodb]]></title>
    <link href="http://www.yuzhewo.com/2015/11/09/CentOS%E4%B8%8B%E9%80%9A%E8%BF%87yum%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85mongodb/"/>
    <id>http://www.yuzhewo.com/2015/11/09/CentOS下通过yum命令安装mongodb/</id>
    <published>2015-11-09T03:57:45.000Z</published>
    <updated>2015-11-09T05:50:35.000Z</updated>
    <content type="html"><![CDATA[<p>MongoDB中发布了新的稳定版本3.0有很多重大的改进。本教程将帮助您在CentOS、RHEL和Fedora的系统安装3.0.x版本的MongoDB。</p>
<p>这个版本主要特点：</p>
<blockquote>
<p>引入了插件式存储引擎的API，允许第三方开发存储引擎<br>引入了WiredTiger存储引擎的支持。<br>关于更新和插入数据增加了更多的一致性<br>该MMAPv1存储引擎增加了收藏级锁的支持<br>在MongoDB的3.0，副本集最多可以有50个成员。<br>各种增强功能集群。</p>
</blockquote>
<h3 id="第1步：添加的MongoDB的yum源信息">第1步：添加的MongoDB的yum源信息</h3><p>按您的要求的MongoDB的版本和系统架构,将下面的yum软件库的配置内容写入/etc/yum.repos.d/mongodb.repo文件。</p>
<p>在这篇文章中，我们使用MongoDB的3.0版本库。</p>
<p>MongoDB的3.0.x的源配置</p>
<p>64位系统：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[MongoDB]</span></span><br><span class="line"><span class="setting">name=<span class="value">MongoDB Repository</span></span></span><br><span class="line"><span class="setting">baseurl=<span class="value">http://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/<span class="number">3.0</span>/x<span class="number">86_64</span>/</span></span></span><br><span class="line"><span class="setting">gpgcheck=<span class="value"><span class="number">0</span></span></span></span><br><span class="line"><span class="setting">enabled=<span class="value"><span class="number">1</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>MongoDB的2.6.X的源配置</p>
<p>64位系统：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[MongoDB]</span></span><br><span class="line"><span class="setting">name=<span class="value">MongoDB Repository</span></span></span><br><span class="line"><span class="setting">baseurl=<span class="value">http://downloads-distro.mongodb.org/repo/redhat/os/x<span class="number">86_64</span>/</span></span></span><br><span class="line"><span class="setting">gpgcheck=<span class="value"><span class="number">0</span></span></span></span><br><span class="line"><span class="setting">enabled=<span class="value"><span class="number">1</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>32位系统：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[MongoDB]</span></span><br><span class="line"><span class="setting">name=<span class="value">MongoDB Repository</span></span></span><br><span class="line"><span class="setting">baseurl=<span class="value">http://downloads-distro.mongodb.org/repo/redhat/os/i686/</span></span></span><br><span class="line"><span class="setting">gpgcheck=<span class="value"><span class="number">0</span></span></span></span><br><span class="line"><span class="setting">enabled=<span class="value"><span class="number">1</span></span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="第2步：安装MongoDB">第2步：安装MongoDB</h3><p>让我们用yum包管理器安装的MongoDB组织包，它会自动安装所有的依赖关系。要安装的MongoDB任何指定版本可以指定包名，例如：mongodb-org-3.0.0。</p>
<p>以下命令将安装最新的稳定版本。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum install mongodb-org</span></span><br></pre></td></tr></table></figure></p>
<p>安装存在依赖的包<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Dependencies Resolved</span><br><span class="line">====================================================================== ======</span><br><span class="line"> Package                          Arch      Version        Repository   Size</span><br><span class="line">====================================================================== ======</span><br><span class="line">Installing:                                                            </span><br><span class="line"> mongodb-org                      x86_64    <span class="number">3.0</span><span class="number">.0</span>-<span class="number">1.</span>el7    MongoDB     <span class="number">4.5</span> k</span><br><span class="line">Installing <span class="keyword">for</span> dependencies:                                           </span><br><span class="line"> mongodb-org-mongos               x86_64    <span class="number">3.0</span><span class="number">.0</span>-<span class="number">1.</span>el7    MongoDB     <span class="number">3.8</span> M</span><br><span class="line"> mongodb-org-server               x86_64    <span class="number">3.0</span><span class="number">.0</span>-<span class="number">1.</span>el7    MongoDB     <span class="number">8.1</span> M</span><br><span class="line"> mongodb-org-shell                x86_64    <span class="number">3.0</span><span class="number">.0</span>-<span class="number">1.</span>el7    MongoDB     <span class="number">4.0</span> M</span><br><span class="line"> mongodb-org-tools                x86_64    <span class="number">3.0</span><span class="number">.0</span>-<span class="number">1.</span>el7    MongoDB      <span class="number">31</span> M                                                                    </span><br><span class="line">Transaction Summary                                                    </span><br><span class="line">====================================================================== ======</span><br><span class="line">Install  <span class="number">1</span> Package (+<span class="number">4</span> Dependent packages)</span><br><span class="line"></span><br><span class="line">Total download size: <span class="number">47</span> M</span><br><span class="line">Installed size: <span class="number">147</span> M</span><br><span class="line">Is <span class="keyword">this</span> ok [y/d/N]: y</span><br></pre></td></tr></table></figure></p>
<h3 id="第3步：运行MongoDB服务">第3步：运行MongoDB服务</h3><p>mongodb-org-server包提供了MongoDB的init启动脚本，可以使用该脚本来启动服务。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># /etc/init.d/mongod restart</span></span><br></pre></td></tr></table></figure></p>
<p>将MongoDB配置为随系统启动。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># chkconfig --level <span class="number">2345</span> mongod on</span></span><br></pre></td></tr></table></figure></p>
<h3 id="第4步：检查MongoDB的版本信息并测试安装是否成功">第4步：检查MongoDB的版本信息并测试安装是否成功</h3><p>使用下面的命令来检查安装的MongoDB版本<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yuzhewo ~]<span class="preprocessor">#  mongo --version</span></span><br><span class="line">MongoDB shell version: <span class="number">3.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></p>
<p>使用命令行连接的MongoDB和执行检查正常工作的一些测试命令。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yuzhewo ~]#  mongo</span><br><span class="line">&gt; <span class="keyword">use</span> mydb;</span><br><span class="line">&gt; <span class="keyword">db</span>.<span class="keyword">test</span>.<span class="keyword">save</span>( &#123; a: 1 &#125; )</span><br><span class="line">&gt; <span class="keyword">db</span>.<span class="keyword">test</span>.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"54fc2a4c71b56443ced99ba2"</span>), <span class="string">"a"</span> : 1 &#125;</span><br></pre></td></tr></table></figure></p>
<p>到此为止系统上已成功安装了MongoDB服务器。</p>
<p>参考文献：<br><a href="http://docs.mongodb.org/manual/installation/" target="_blank" rel="external">http://docs.mongodb.org/manual/installation/</a><br><a href="http://tecadmin.net/install-mongodb-on-centos-rhel-and-fedora/" target="_blank" rel="external">http://tecadmin.net/install-mongodb-on-centos-rhel-and-fedora/</a><br><a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="external">https://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MongoDB中发布了新的稳定版本3.0有很多重大的改进。本教程将帮助您在CentOS、RHEL和Fedora的系统安装3.0.x版本的MongoDB。</p>
<p>这个版本主要特点：</p>
<blockquote>
<p>引入了插件式存储引擎的API，允许第三方开发存]]>
    </summary>
    
      <category term="CentOS" scheme="http://www.yuzhewo.com/tags/CentOS/"/>
    
      <category term="mongodb" scheme="http://www.yuzhewo.com/tags/mongodb/"/>
    
      <category term="yum" scheme="http://www.yuzhewo.com/tags/yum/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为PHP设置nginx服务器环境变量]]></title>
    <link href="http://www.yuzhewo.com/2015/11/07/%E4%B8%BAPHP%E8%AE%BE%E7%BD%AEnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://www.yuzhewo.com/2015/11/07/为PHP设置nginx服务器环境变量/</id>
    <published>2015-11-07T08:15:27.000Z</published>
    <updated>2015-11-09T08:38:39.000Z</updated>
    <content type="html"><![CDATA[<p>设置环境变量常见的地方为区分开发环境/生产环境，或者定义一些数据库的帐号密码</p>
<h3 id="指令">指令</h3><p>设置当前环境变量为develop<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fastcgi_param</span> RUNTIME_ENVIROMENT <span class="string">'develop'</span></span><br></pre></td></tr></table></figure></p>
<p>数据库帐号密码<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fastcgi_param</span> MYSQL_USERNAME <span class="string">'root'</span></span><br><span class="line">fastcgi_param MYSQL_PASSWORD <span class="string">'root'</span></span><br></pre></td></tr></table></figure></p>
<h3 id="配置文件格式">配置文件格式</h3><p>(全局模式)在fastcgi_params文件中配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fastcgi_param</span> RUNTIME_ENVIROMENT <span class="string">'develop'</span>;</span><br><span class="line"><span class="title">fastcgi_param</span> MYSQL_USERNAME <span class="string">'root'</span>;</span><br><span class="line"><span class="title">fastcgi_param</span> MYSQL_PASSWORD <span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></p>
<p>在nginx.conf中配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span>   <span class="number">80</span>; </span><br><span class="line">    <span class="title">root</span> /var/www;</span><br><span class="line">    <span class="title">index</span> index.php;</span><br><span class="line">    <span class="title">server_name</span> localhost;</span><br><span class="line">    <span class="title">location</span> / &#123;   </span><br><span class="line">         <span class="title">index</span> index.php;</span><br><span class="line">    &#125;   </span><br><span class="line">      </span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ .*\.(php|php5)?$</span> &#123;</span><br><span class="line">        <span class="title">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="title">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="title">include</span> fastcgi_params;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(局部变量)只对某一域名下程序有效，可以在server下添加变量</p>
<p>在vhost/localhost.conf中配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span>   <span class="number">80</span>; </span><br><span class="line">    <span class="title">root</span> /var/www;</span><br><span class="line">    <span class="title">index</span> index.php;</span><br><span class="line">    <span class="title">server_name</span> localhost;</span><br><span class="line">    <span class="title">location</span> / &#123;   </span><br><span class="line">         <span class="title">index</span> index.php;</span><br><span class="line">    &#125;   </span><br><span class="line">      </span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ .*\.(php|php5)?$</span> &#123;</span><br><span class="line">        <span class="title">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="title">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="title">include</span> fastcgi_params;</span><br><span class="line">        <span class="title">fastcgi_param</span> DOMAIN “www.yuzhewo.com”;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="在PHP中调用服务器环境变量">在PHP中调用服务器环境变量</h3><p>在PHP中有两个调用方式：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env</span> = getenv(<span class="string">'RUNTIME_ENVIROMENT'</span>);</span><br></pre></td></tr></table></figure></p>
<p>还有超全局变量方式：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env</span> = $_SERVER[<span class="string">'RUNTIME_ENVIROMENT'</span>];</span><br></pre></td></tr></table></figure></p>
<p>参考资料：<br><a href="http://www.dexcoder.com/dexcoder/article/887" target="_blank" rel="external">http://www.dexcoder.com/dexcoder/article/887</a><br><a href="http://ifelsend.com/blog/2014/05/15/nginx配置php环境变量.html" target="_blank" rel="external">http://ifelsend.com/blog/2014/05/15/nginx配置php环境变量.html</a><br><a href="http://yansu.org/2014/05/04/set-environment-variables-of-server-for-php.html" target="_blank" rel="external">http://yansu.org/2014/05/04/set-environment-variables-of-server-for-php.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>设置环境变量常见的地方为区分开发环境/生产环境，或者定义一些数据库的帐号密码</p>
<h3 id="指令">指令</h3><p>设置当前环境变量为develop<br><figure class="highlight nginx"><table><tr><td class]]>
    </summary>
    
      <category term="PHP" scheme="http://www.yuzhewo.com/tags/PHP/"/>
    
      <category term="nginx" scheme="http://www.yuzhewo.com/tags/nginx/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速了解和学习Unix/Linux下Shell（一）]]></title>
    <link href="http://www.yuzhewo.com/2015/11/05/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AD%A6%E4%B9%A0Unix-Linux%E4%B8%8BShell%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.yuzhewo.com/2015/11/05/快速了解和学习Unix-Linux下Shell（一）/</id>
    <published>2015-11-05T14:57:39.000Z</published>
    <updated>2015-11-05T15:21:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、Shell简介">一、Shell简介</h3><p>Shell源于UnixShell，本身是一个用C语言编写的程序，它是用户使用Uninx/Linux的桥梁，是用户与Unix/Linux交互主要的交互界面和工具，学习使用Shell首先需要具备一定的Unix/Lunix基础。</p>
<p>Shell虽然是Unix的第一个脚本语言但是它一直被忽略，是一个不受重视的脚本语言，不过Shell是非常优秀且独具特色的一种脚本语言，它结合了延展性与效率，并且在Unix/Linux的发展过程中不断的被改良，使它多年来能与很多新兴的的脚本语言保持抗衡。Shell需要依赖其他应用程序才能完成大部分的工作，这或许是它的缺陷或许不是，但它长处是：简洁的标记方式，而且比C语言等编译性语言编写和修改更加容易和快速。</p>
<p>Shell有两种执行命令的方式：</p>
<p>交互式（Interactive）：解释执行用户的命令，用户输入一条命令，Shell就解释执行一条。</p>
<p>批处理（Batch）：用户事先写一个Shell脚本(Script)，包含有很多条命令Shell可以一次执行完这些命令。</p>
<p>Shell脚本和编程语言很相似，也有变量和流程控制语句，但Shell脚本是解释执行语言不需要编译，Shell解释程序从脚本中逐行读取并命令并执行，这相当于系统帮助用户把脚本中的命令一行一行敲到Shell提示符下执行。</p>
<h3 id="二、Shell解释器">二、Shell解释器</h3><p>Unix/Linux上常见的Shell解释器有bash、sh、csh、ksh等，习惯上把它们称作统称为Shell。我们常说有多少种Shell，其实说的是有多少种Shell脚本解释器。</p>
<p>1.bash</p>
<p>bash是大多数Linux发行版默认使用的shell解释环境（这篇文档的所有例子基于bash）。bash由Brian Fox和Chet Ramey共同开发完成，其名称是由BourneAgain Shell的缩写而来，一共有40个内部命令。<br>大多数Linux发行版使用bash作为默认的shell是因为它有下列特色：</p>
<p>可以使用类似DOS下面的doskey的功能，用方向键查阅和快速输入并修改命令。<br>自动通过查找匹配的方式可以快速给出以某字符串开头的命令（按tab键）。<br>包含了丰富的帮助文档，你只要在提示符下面键入help就可以得到相关的帮助。<br>bash基于Bourne shell，吸收了C shell和Korn shell的一些特性。bash完全兼容sh，用sh写的脚本可以不加修改的在bash中执行。</p>
<p>2.sh</p>
<p>sh由Steve Bourne开发，是Bourne Shell的缩写，sh是Unix环境下默认的shell解释器。</p>
<p>3.ash</p>
<p>ash shell由Kenneth Almquist编写，是Linux众多shell解释其中中占用系统资源最少的一个，它只包含24个内部命令，因而使用起来很不方便。</p>
<p>4.csh</p>
<p>csh 是Linux shell解释器中比较大的一种，它由以William Joy为代表的共计47位作者共同编写，共有52个内部命令。csh其实是/bin/tcsh的一个文件链接，也实际上csh就是tcsh。</p>
<p>5.ksh</p>
<p>ksh(Korn shell)由Eric Gisin编写的开源shell，共有42条内部命令。ksh最大的优点是几乎和商业发行版的ksh完全兼容，这样就可以在开源系统环境下尝试商业版本的特性了。</p>
<h3 id="三、语言的执行方式">三、语言的执行方式</h3><p>1.编译型语言</p>
<p>很多传统的程序设计语言，例如Fortran、Ada、Pascal、C、C++和Java，都是编译型语言。这类语言需要预先将我们写好的源代码(source code)转换成目标代码(object code)，这个过程被称作“编译”。</p>
<p>运行程序时CPU（或虚拟机）直接读取目标代码(object code)并执行，编译型语言的有点是</p>
<p>由于编译后的目标代码(object code)非常接近计算机底层代码，因此执行效率很非常高。</p>
<p>但是，由于编译型语言需要编写、编译、执行等过程，且很多语言面向的是系统底层开发，因此往往实现一个简单的功能时需要大量的代码。另外，由于编译后在没有编译环境的情况下无法对程序进行修改，以适应新操作系统环境，所以编译型语言的可重用性不高。</p>
<p>2.解释型语言</p>
<p>解释型语言也被称作“脚本语言”。解释型语言在执行时是由解释器(interpreter)读取源代码(source code)并即时编译成目标代码(object code)，再由计算机运行。因为每次执行程序都需要有编译过程，因此执行效率一般不如编译型语言。</p>
<p>使用脚本编程语言的好处是，它们多半运行在比编译型语言还高的层级，能够轻易处理文件与目录之类的对象；缺点是它们的效率通常不如编译型语言。不过权衡之 下，通常使用脚本编程还是值得的：花一个小时写成的简单脚本，同样的功能用C或C++来编写实现，可能需要两天，而且一般来说，脚本执行的速度已经够快 了，快到足以让人忽略它性能上的问题。脚本编程语言的例子有awk、Perl、Python、Ruby与Shell。</p>
<h3 id="四、何时需要用到Shell？">四、何时需要用到Shell？</h3><p>因为Shell是各UNIX系统通用解释环境，并且POSIX也对shell提出了相关标准。因此，Shell脚本实际上是一次编写到处运行。</p>
<p>Shell脚本的优势：</p>
<p>简单：Shell是一个高级语言；通过它，你可以用简介优雅的代码实现复杂的操作。<br>可移植：在POSIX的规范下，可以做到脚本一次编写到处运行。<br>容易编写：好写，好改，只需要一个最简单的文本编辑器(vi,emacs…)就够了。</p>
<p>但是，考虑到Shell的环境限制和效率问题，下列情况一般不使用Shell：</p>
<blockquote>
<p>资源密集型的任务，尤其在需要考虑效率时（比如，排序，hash等等）。<br>需要处理大任务的数学操作，尤其是浮点运算，精确运算，或者复杂的算术运算（这种情况一般使用C++或FORTRAN 来处理）。<br>有跨平台（操作系统）移植需求（一般使用C 或Java）。<br>复杂的应用，在必须使用结构化编程的时候（需要变量的类型检查，函数原型，等等）。<br>对于影响系统全局性的关键任务应用。<br>对于安全有很高要求的任务，比如你需要一个健壮的系统来防止入侵、破解、恶意破坏等等。<br>项目由连串的依赖的各个部分组成。<br>需要大规模的文件操作。<br>需要多维数组的支持。<br>需要数据结构的支持，比如链表或数等数据结构。<br>需要产生或操作图形化界面 GUI。<br>需要直接操作系统硬件。<br>需要 I/O 或socket 接口。<br>需要使用库或者遗留下来的老代码的接口。<br>私人的、闭源的应用（shell 脚本把代码就放在文本文件中，全世界都能看到）。<br>如果你的业务需求符合上边的任意一条，那么就考虑一下更强大的语言吧——或许是Perl、Tcl、Python、Ruby——或者是更高层次的编译语言比如C/C++、Java。即使如此，在开发过程中使用shell作为原型工具，也是非常有用的。</p>
</blockquote>
<h3 id="五、写第一个Shell">五、写第一个Shell</h3><p>打开文本编辑器，新建一个扩展名为sh的文件（sh代表shell，当然其他扩展名也行，只要不会混淆)，输入下列代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello World !"</span></span><br></pre></td></tr></table></figure>
<p>“#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell，echo命令用于向窗口输出文本。</p>
<p>1.运行Shell</p>
<p>有两种方式来执行你刚编写的shell。</p>
<p>1.1 作为可执行程序</p>
<p>将上面的代码保存为test.sh，并 cd 到相应目录：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./<span class="keyword">test</span>.<span class="keyword">sh</span>  #使脚本具有执行权限</span><br><span class="line">./<span class="keyword">test</span>.<span class="keyword">sh</span>           #执行脚本</span><br></pre></td></tr></table></figure></p>
<p>注意，一定要写成./test.sh，而不是test.sh。运行其它程序也一样，直接写test.sh，linux系统会根据PATH环境变量里寻找相应名字的应用程序或可执行shell脚本，而默认的PATH环境变量只有/bin, /sbin, /usr/bin，/usr/sbin等几个路径，你的当前目录通常不在PATH环境变量中，所以写成test.sh是会提示找不到命令，而用./test.sh相当于告诉系统我所要执行的命令就在当前目录中。</p>
<blockquote>
<p>注意：通过这种方式运行shell脚本，第一行一定要写#!/bin/bash，好让系统查找到正确的解释器。</p>
</blockquote>
<p>这里的”系统”，其实就是shell这个应用程序（想象一下Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指shell，那么一个使用/bin/sh作为解释器的脚本是不是可以省去第一行呢？是的。</p>
<p>1.2 作为解释器参数</p>
<p>这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/<span class="keyword">sh</span> <span class="keyword">test</span>.<span class="keyword">sh</span>    </span><br><span class="line">/bin/php <span class="keyword">test</span>.php</span><br></pre></td></tr></table></figure></p>
<p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p>
<p>再看一个例子。下面的脚本使用 read 命令从 stdin 获取输入并赋值给 PERSON 变量，最后在 stdout 上输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author : 4byte.cn</span></span><br><span class="line"><span class="comment"># Copyright (c) http://www.4byte.cn</span></span><br><span class="line"><span class="comment"># Script follows here:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"What is your name?"</span></span><br><span class="line"><span class="built_in">read</span> PERSON</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello, <span class="variable">$PERSON</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>运行脚本：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod +<span class="keyword">x</span> ./test.<span class="keyword">sh</span>    </span><br><span class="line">$./test.<span class="keyword">sh</span></span><br><span class="line">What <span class="keyword">is</span> your name?</span><br><span class="line"><span class="number">4</span>byte.<span class="keyword">cn</span></span><br><span class="line">Hello, <span class="number">4</span>byte.<span class="keyword">cn</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure></p>
<h3 id="六、变量">六、变量</h3><p>Shell支持自定义变量。</p>
<p>1.定义变量</p>
<p>定义变量时变量名不加美元符号($)，如：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">variableName=<span class="value"><span class="string">"value"</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p>
<blockquote>
<p>首个字符必须为字母（a-z，A-Z）。<br>中间不能有空格，可以使用下划线（_）。<br>不能使用标点符号。<br>不能使用bash里的关键字（可用help命令查看保留关键字）。</p>
</blockquote>
<p>如：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">url</span>="</span><br><span class="line"><span class="constant">num</span>=100</span><br></pre></td></tr></table></figure></p>
<p>2.使用变量</p>
<p>只要在变量名前面加美元符号($)即可使用变量，如：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"4byte.cn"</span></span><br><span class="line">echo <span class="variable">$your</span>_name</span><br><span class="line">echo $&#123;your_name&#125;</span><br></pre></td></tr></table></figure></p>
<p>变量名外面的花括号是可选的，加花括号是为了帮助解释器识别变量定义边界，比如下面这种情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"I am good at <span class="variable">$&#123;skill&#125;</span>Script"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。推荐给所有变量加上花括号，这是个好的编程习惯。</p>
<p>3.变量重新赋值</p>
<p>已定义的变量可以重新赋值，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">"www.4byte.cn"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url&#125;</span></span><br><span class="line">url=<span class="string">"www.4byte.cn"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>4.只读变量</p>
<p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>
<p>下面的例子是错误的，因为尝试更改只读变量，结果报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">url=<span class="string">"http://www.4byte.cn/question/tags/linux"</span> </span><br><span class="line"><span class="built_in">readonly</span> url</span><br><span class="line">url=<span class="string">"http://www.4byte.cn/learning/tags/linux"</span></span><br></pre></td></tr></table></figure></p>
<p>运行脚本，结果如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>sh: NAME: <span class="keyword">This</span> variable is <span class="keyword">read</span> only.</span><br></pre></td></tr></table></figure></p>
<p>5.删除变量</p>
<p>使用 unset 命令可以删除变量。语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> variable_name</span><br></pre></td></tr></table></figure></p>
<p>变量被删除后不能再次使用；unset 命令不能删除只读变量。下面例子不会有任何输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line">url=<span class="string">" </span><br><span class="line">unset url</span><br><span class="line">echo <span class="variable">$url</span></span></span><br></pre></td></tr></table></figure></p>
<p>6.变量类型</p>
<p>运行shell时，会同时存在三种变量：</p>
<p>局部变量<br>局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p>
<p>环境变量<br>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p>
<p>shell变量<br>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p>
<h3 id="七、特殊用途变量：Shell_$0,_$#,_$*,_$@,_$?,_$$和命令行参数">七、特殊用途变量：Shell $0, $#, $*, $@, $?, $$和命令行参数</h3><p>1.特殊用途变量</p>
<p>Shell中包含有特殊含义的变量，这样的变量被称为特殊变量。</p>
<p>例如，$ 表示当前Shell进程的PID，看下面的代码：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> $$</span><br></pre></td></tr></table></figure></p>
<p>运行结果<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32282</span></span><br></pre></td></tr></table></figure></p>
<p>特殊用途变量列表</p>
<p><pre>变量  含义<br>$0  当前脚本的文件名<br>$n  传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#  传递给脚本或函数的参数个数。<br>$<em>  传递给脚本或函数的所有参数。<br>$@  传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $</em> 稍有不同，下面将会讲到。<br>$?  上个命令的退出状态，或函数的返回值。<br>$$  当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</pre></p>
<p>2.从Shell获取命令行参</p>
<p>运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 $n 表示，例如，$1 表示第一个参数，$2 表示第二个参数，依次类推。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash    </span><br><span class="line">    </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"File Name: <span class="variable">$0</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"First Parameter : <span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"First Parameter : <span class="variable">$2</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Quoted Values: <span class="variable">$@</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Quoted Values: $*"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Total Number of Parameters : <span class="variable">$#</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果为<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$./test.sh Zara Ali    </span><br><span class="line">    </span><br><span class="line">File <span class="string">Name :</span> ./test.sh</span><br><span class="line">First <span class="string">Parameter :</span> Zara</span><br><span class="line">Second <span class="string">Parameter :</span> Ali</span><br><span class="line">Quoted <span class="string">Values:</span> Zara Ali</span><br><span class="line">Quoted <span class="string">Values:</span> Zara Ali</span><br><span class="line">Total Number of <span class="string">Parameters :</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>3.$*和$@</p>
<p>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。当它们被双引号(“ “)包含时:</p>
<p>“$<em>“ 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数<br>“$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。<br>通过下面的例子可以看到$</em>和$@的区别：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash    </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$*="</span> $*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\"\$*\"="</span> <span class="string">"$*"</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$@="</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\"\$@\"="</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$*"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$@"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \"\$*\""</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"$*"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \"\$@\""</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>用命令./test.sh 1 2 3 4执行，会得到下面的结果<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$*</span>=  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>   </span><br><span class="line"><span class="string">"$*"</span>= <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="variable">$@</span>=  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="variable">$@</span><span class="string">"= 1 2 3 4</span><br><span class="line">print each param from $*</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">print each param from $@</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">    </span><br><span class="line">print each param from "</span><span class="variable">$*</span><span class="string">"</span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line">print each param from "</span><span class="variable">$@</span><span class="string">"</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span></span><br></pre></td></tr></table></figure></p>
<p>4.退出状态</p>
<p>退出状态，是指上一个命令执行后的返回结果，退出状态是一个数字，一般情况下，大部分命令执行成功会返回0，失败返回1。不过，也有一些命令为了表示不同类型的错误也会返回其他值。在Shell中可以使用 $? 获得上一个命令的退出状态，也可以获取函数的返回值。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$./test.sh <span class="number">4</span><span class="typename">byte</span> fourbyte</span><br><span class="line">File <span class="string">Name :</span> ./test.sh</span><br><span class="line">First <span class="string">Parameter :</span> <span class="number">4</span><span class="typename">byte</span> </span><br><span class="line">Second <span class="string">Parameter :</span> fourbyte</span><br><span class="line">Quoted <span class="string">Values:</span> <span class="number">4</span><span class="typename">byte</span> fourbyte</span><br><span class="line">Quoted <span class="string">Values:</span> <span class="number">4</span><span class="typename">byte</span> fourbyte</span><br><span class="line">Total Number of <span class="string">Parameters :</span> <span class="number">2</span></span><br><span class="line">$echo $?</span><br><span class="line">0</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p>
<p>原文链接<br><a href="http://www.4byte.cn/learning/119987/kuai-su-liao-jie-he-xue-xi-unix-linux-xia-shell-yi.html" target="_blank" rel="external">http://www.4byte.cn/learning/119987/kuai-su-liao-jie-he-xue-xi-unix-linux-xia-shell-yi.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、Shell简介">一、Shell简介</h3><p>Shell源于UnixShell，本身是一个用C语言编写的程序，它是用户使用Uninx/Linux的桥梁，是用户与Unix/Linux交互主要的交互界面和工具，学习使用Shell首先需要具备一定的Unix/L]]>
    </summary>
    
      <category term="linux" scheme="http://www.yuzhewo.com/tags/linux/"/>
    
      <category term="shell" scheme="http://www.yuzhewo.com/tags/shell/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos配置iptables防火墙]]></title>
    <link href="http://www.yuzhewo.com/2015/11/04/Centos%E9%85%8D%E7%BD%AEiptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://www.yuzhewo.com/2015/11/04/Centos配置iptables防火墙/</id>
    <published>2015-11-04T13:50:19.000Z</published>
    <updated>2015-11-04T14:56:58.000Z</updated>
    <content type="html"><![CDATA[<p>iptables是一个配置Linux内核防火墙的命令行工具，是netfilter项目的一部分。术语iptables也经常代指该内核级防火墙。iptables 可以直接配置，也可以通过许多前端和图形界面配置。iptables用于ipv4，ip6tables用于ipv6。</p>
<h3 id="基本概念">基本概念</h3><p>iptables 可以检测、修改、转发、重定向和丢弃 IPv4 数据包。过滤 IPv4 数据包的代码已经内置于内核中，并且按照不同的目的被组织成 表 的集合。表 由一组预先定义的 链 组成，链 包含遍历顺序规则。每一条规则包含一个谓词的潜在匹配和相应的动作（称为 目标），如果谓词为真，该动作会被执行。也就是说条件匹配。</p>
<h3 id="安装与检测">安装与检测</h3><p>常见Linux发行版都已默认安装了iptables，可以通过命令查看iptables的运行状态</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yuzhewo ~]<span class="comment"># service iptables status</span></span><br><span class="line">iptables: Firewall <span class="keyword">is</span> <span class="keyword">not</span> <span class="property">running</span>.</span><br></pre></td></tr></table></figure>
<p>如果显示上面命令说明iptables已安装但是未启动</p>
<p>如果显示下面字符说明iptables未安装<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="string">bash:</span> <span class="string">iptables:</span> command not found</span><br></pre></td></tr></table></figure></p>
<p>可执行如下命令进行安装<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># yum install iptables</span></span><br></pre></td></tr></table></figure></p>
<h3 id="服务启动与关闭">服务启动与关闭</h3><p>当服务器配置正常时候，访问服务器无响应或者被拒绝，需要考虑iptables的问题，可以尝试关闭iptables服务后测试，若可访问可以确定是iptables的问题。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">启动服务：</span><br><span class="line">[root@yuzhewo ~]# service iptables <span class="operator"><span class="keyword">start</span></span><br><span class="line">iptables: Applying firewall <span class="keyword">rules</span>:                         [  OK  ]</span><br><span class="line"></span><br><span class="line">关闭服务：</span><br><span class="line">[root@yuzhewo ~]# service iptables <span class="keyword">stop</span></span><br><span class="line">iptables: Setting chains <span class="keyword">to</span> <span class="keyword">policy</span> <span class="keyword">ACCEPT</span>: filter          [  OK  ]</span><br><span class="line">iptables: Flushing firewall <span class="keyword">rules</span>:                         [  OK  ]</span><br><span class="line">iptables: Unloading modules:                               [  OK  ]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="基础语法">基础语法</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#规则的观察与清除</span><br><span class="line"></span><br><span class="line">     iptables [-t tables] [-L] [-nv]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">t ：后面接 table ，例如 nat 或 filter ，若省略此项目，则使用默认的 filter</span><br><span class="line"></span>-<span class="ruby"><span class="constant">L</span> ：列出目前的 table 的规则</span><br><span class="line"></span>-<span class="ruby">n ：不进行 <span class="constant">IP</span> 与 <span class="constant">HOSTNAME</span> 的反查，显示讯息的速度会快很多！</span><br><span class="line"></span>-<span class="ruby">v ：列出更多的信息，包括通过该规则的封包总位数、相关的网络接口等</span><br><span class="line"></span></span><br><span class="line">     iptables [-t tables] [-FXZ]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby"><span class="constant">F</span> ：清除所有的已订定的规则；</span><br><span class="line"></span>-<span class="ruby"><span class="constant">X</span> ：杀掉所有使用者 <span class="string">"自定义"</span> 的 chain (应该说的是 tables ）啰；</span><br><span class="line"></span>-<span class="ruby"><span class="constant">Z</span> ：将所有的 chain 的计数与流量统计都归零</span><br><span class="line"></span></span><br><span class="line"></span><br><span class="line">#封包的基础比对：IP, 网域及接口装置</span><br><span class="line"></span><br><span class="line">    iptables [-AI 链名] [-io 网络接口] [-p 协议] [-s 来源IP/网域] [-d 目标IP/网域] -j [ACCEPT|DROP|REJECT|LOG]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby"><span class="constant">AI</span> 链名：针对某的链进行规则的 <span class="string">"插入"</span> 或 <span class="string">"累加"</span></span><br><span class="line"></span>    -<span class="ruby"><span class="constant">A</span> ：新增加一条规则，该规则增加在原本规则的最后面。例如原本已经有四条规则，</span><br><span class="line"></span>         使用 -A 就可以加上第五条规则！</span><br><span class="line">    -<span class="ruby"><span class="constant">I</span> ：插入一条规则。如果没有指定此规则的顺序，默认是插入变成第一条规则。</span><br><span class="line"></span>         例如原本有四条规则，使用 -I 则该规则变成第一条，而原本四条变成 2~5 号</span><br><span class="line">    链 ：有 INPUT, OUTPUT, FORWARD 等，此链名称又与 -io 有关，请看底下。</span><br><span class="line"></span><br><span class="line">-<span class="ruby">io 网络接口：设定封包进出的接口规范</span><br><span class="line"></span>    -<span class="ruby">i ：封包所进入的那个网络接口，例如 eth<span class="number">0</span>, lo 等接口。需与 <span class="constant">INPUT</span> 链配合；</span><br><span class="line"></span>    -<span class="ruby">o ：封包所传出的那个网络接口，需与 <span class="constant">OUTPUT</span> 链配合；</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby">p 协定：设定此规则适用于哪种封包格式</span><br><span class="line"></span>   主要的封包格式有： tcp, udp, icmp 及 all 。</span><br><span class="line"></span><br><span class="line">-<span class="ruby">s 来源 <span class="constant">IP</span>/网域：设定此规则之封包的来源项目，可指定单纯的 <span class="constant">IP</span> 或包括网域，例如：</span><br><span class="line"></span>   IP  ：192.168.0.100</span><br><span class="line">   网域：192.168.0.0/24, 192.168.0.0/255.255.255.0 均可。</span><br><span class="line">   若规范为『不许』时，则加上 ! 即可，例如：</span><br><span class="line">   -<span class="ruby">s ! <span class="number">192.168</span>.<span class="number">100.0</span>/<span class="number">24</span> 表示不许 <span class="number">192.168</span>.<span class="number">100.0</span>/<span class="number">24</span> 之封包来源；</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby">d 目标 <span class="constant">IP</span>/网域：同 -s ，只不过这里指的是目标的 <span class="constant">IP</span> 或网域。</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby">j ：后面接动作，主要的动作有接受(<span class="constant">ACCEPT</span>)、丢弃(<span class="constant">DROP</span>)、拒绝(<span class="constant">REJECT</span>)及记录(<span class="constant">LOG</span>)</span><br><span class="line"></span></span><br><span class="line">#TCP, UDP 的规则比对：针对端口设定</span><br><span class="line"></span><br><span class="line">    iptables [-AI 链] [-io 网络接口] [-p tcp,udp] [-s 来源IP/网域] [--sport 埠口范围] [-d 目标IP/网域] [--dport 端口范围] -j [ACCEPT|DROP|REJECT]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">-sport 埠口范围：限制来源的端口号码，端口号码可以是连续的，例如 <span class="number">1024</span><span class="symbol">:</span><span class="number">65535</span></span><br><span class="line"></span>-<span class="ruby">-dport 埠口范围：限制目标的端口号码。</span><br><span class="line"></span></span><br><span class="line">#iptables 外挂模块：mac 与 state</span><br><span class="line"></span><br><span class="line">    iptables -A INPUT [-m state] [--state 状态]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">m ：一些 iptables 的外挂模块，主要常见的有：</span><br><span class="line"></span>     state ：状态模块</span><br><span class="line">     mac   ：网络卡硬件地址 (hardware address)</span><br><span class="line">-<span class="ruby">-state ：一些封包的状态，主要有：</span><br><span class="line"></span>     INVALID    ：无效的封包，例如数据破损的封包状态</span><br><span class="line">     ESTABLISHED：已经联机成功的联机状态；</span><br><span class="line">     NEW        ：想要新建立联机的封包状态；</span><br><span class="line">     RELATED    ：这个最常用！表示这个封包是与我们主机发送出去的封包有关</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ICMP 封包规则的比对：针对是否响应 ping 来设计</span><br><span class="line"></span><br><span class="line">    iptables -A INPUT [-p icmp] [--icmp-type 类型] -j ACCEPT</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">-icmp-type ：后面必须要接 <span class="constant">ICMP</span> 的封包类型，也可以使用代号，</span><br><span class="line"></span>              例如 8  代表 echo request 的意思。</span><br></pre></td></tr></table></figure>
<h3 id="配置实例">配置实例</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许来自于lo接口的数据包</span></span><br><span class="line"><span class="comment">#如果没有此规则，你将不能通过127.0.0.1访问本地服务，例如ping 127.0.0.1</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="comment">#ssh端口22</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#FTP端口21</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line"><span class="comment">#web服务端口80</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#tomcat</span></span><br><span class="line">iptables -A INPUT -p tcp --dport xxxx -j ACCEPT</span><br><span class="line"><span class="comment">#mysql</span></span><br><span class="line">iptables -A INPUT -p tcp --dport xxxx -j ACCEPT</span><br><span class="line"><span class="comment">#允许icmp包通过,也就是允许ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"><span class="comment">#允许所有对外请求的返回包</span></span><br><span class="line"><span class="comment">#本机对外请求相当于OUTPUT,对于返回数据包必须接收啊，这相当于INPUT了</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment">#如果要添加内网ip信任（接受其所有TCP请求）</span></span><br><span class="line">iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT</span><br><span class="line"><span class="comment">#过滤所有非以上规则的请求</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line"><span class="comment">#要封停一个IP，使用下面这条命令：</span></span><br><span class="line">iptables -I INPUT -s <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> -j DROP</span><br><span class="line"><span class="comment">#要解封一个IP，使用下面这条命令:</span></span><br><span class="line">iptables -D INPUT -s <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> -j DROP</span><br></pre></td></tr></table></figure>
<h3 id="保存配置">保存配置</h3><p>通过iptables命令添加的规则，需要通过iptables save命令将配置信息保存到/etc/sysconfig/iptables文件当中，保证下次启动时仍会引用配置好的规则。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># service iptables save</span></span><br></pre></td></tr></table></figure></p>
<h3 id="注意事项">注意事项</h3><p>在修改iptables配置规则时，尤其时有清之前配置之时，要多开几个终端连接，防止规则错误关闭ssh端口，导致无法远程登录服务器。</p>
<p>参考资料：<br><a href="http://blog.kkyun.com/?p=50" target="_blank" rel="external">http://blog.kkyun.com/?p=50</a><br><a href="http://wsgzao.github.io/post/iptables/" target="_blank" rel="external">http://wsgzao.github.io/post/iptables/</a><br><a href="https://wiki.centos.org/zh/HowTos/Network/IPTables" target="_blank" rel="external">https://wiki.centos.org/zh/HowTos/Network/IPTables</a><br><a href="http://wiki.ubuntu.org.cn/IptablesHowTo" target="_blank" rel="external">http://wiki.ubuntu.org.cn/IptablesHowTo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iptables是一个配置Linux内核防火墙的命令行工具，是netfilter项目的一部分。术语iptables也经常代指该内核级防火墙。iptables 可以直接配置，也可以通过许多前端和图形界面配置。iptables用于ipv4，ip6tables用于ipv6。</p]]>
    </summary>
    
      <category term="centos" scheme="http://www.yuzhewo.com/tags/centos/"/>
    
      <category term="iptables" scheme="http://www.yuzhewo.com/tags/iptables/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改gitlab使用现有nginx服务及502问题解决]]></title>
    <link href="http://www.yuzhewo.com/2015/11/03/%E4%BF%AE%E6%94%B9gitlab%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89nginx%E6%9C%8D%E5%8A%A1%E5%8F%8A502%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.yuzhewo.com/2015/11/03/修改gitlab使用现有nginx服务及502问题解决/</id>
    <published>2015-11-03T15:21:38.000Z</published>
    <updated>2015-11-04T01:34:21.000Z</updated>
    <content type="html"><![CDATA[<p>通过gitlab官方源安装好gitlab之后，程序包中会自带一个nginx服务器，gitlab本身消耗系统资源严重，理论上最好单独部署在一台服务器上，但是为了节约成本，也会跟其他服务共用服务器，如果之前机器上就有nginx服务则会冲突，可以修改配置，使用已经存在的nginx。</p>
<h4 id="修改gitlab使用现有nginx服务">修改gitlab使用现有nginx服务</h4><p>修改gitlab.rb配置文件<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># vim /etc/gitlab/gitlab.rb </span></span><br><span class="line"></span><br><span class="line">在配置文件中搜索 /<span class="preprocessor"># nginx</span></span><br><span class="line"><span class="preprocessor"># nginx[<span class="string">'enable'</span>] = true</span></span><br><span class="line"><span class="preprocessor"># nginx[<span class="string">'client_max_body_size'</span>] = <span class="string">'250m'</span></span></span><br><span class="line"><span class="preprocessor"># nginx[<span class="string">'redirect_http_to_https'</span>] = false</span></span><br><span class="line"></span><br><span class="line">修改上面配置为<span class="literal">false</span></span><br><span class="line">nginx[<span class="string">'enable'</span>] = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>将gitlab生成的nginx配置复制到nginx虚拟主机配置文件夹下</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">拷贝配置：</span><br><span class="line">[root@yuzhewo ~]# cp /<span class="keyword">var</span>/opt/gitlab/nginx/<span class="keyword">conf</span>/gitlab-http.<span class="keyword">conf</span> /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/</span><br><span class="line"></span><br><span class="line">检测配置：</span><br><span class="line">[root@yuzhewo ~]# nginx -t</span><br><span class="line">nginx: [emerg] unknown <span class="keyword">log</span> <span class="keyword">format</span> <span class="string">"gitlab_access"</span> <span class="keyword">in</span> /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/gitlab-http.<span class="keyword">conf</span>:56</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> failed</span><br></pre></td></tr></table></figure>
<p>将配置中第13行结尾的gitlab_access去掉，即可完成验证。重启nginx使配置生效。</p>
<h4 id="页面502问题">页面502问题</h4><p>替换完成后如果出现502问题，查看日志</p>
<p>权限问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yuzhewo ~]<span class="preprocessor"># tail -f /var/log/gitlab/nginx/<span class="keyword">error</span>.log </span></span><br><span class="line"></span><br><span class="line"><span class="number">2015</span>/<span class="number">11</span>/<span class="number">03</span> <span class="number">15</span>:<span class="number">45</span>:<span class="number">10</span> [error] <span class="number">8931</span><span class="preprocessor">#<span class="number">0</span>: *<span class="number">15</span> connect() to unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socketfailed (<span class="number">13</span>: Permission denied) while connecting to upstream, client: xxx.xxx.xxx.xx, server: git.xxxx.com, request: <span class="string">"GET / HTTP/1.1"</span>, upstream: <span class="string">"http://unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket:/"</span>, host: <span class="string">"git.xxxx.com"</span></span></span><br></pre></td></tr></table></figure></p>
<p>通过nginx日志可以看出，nginx没有访问gitlab的socket权限，修改方式有多种，我的机器上nginx的执行用户是nginx，而socket文件夹为<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">drwxr-x--- <span class="number">2</span> git  gitlab-www <span class="number">4096</span> <span class="number">11</span>月  <span class="number">3</span> <span class="number">15</span>:<span class="number">57</span> sockets</span><br><span class="line"></span><br><span class="line">文件赋权限</span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># chmod -R o+x /var/opt/gitlab/gitlab-rails/sockets</span></span><br><span class="line"> <span class="literal">or</span></span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># chmod 755 /var/opt/gitlab/gitlab-rails/sockets</span></span><br><span class="line"></span><br><span class="line">将nginx用户加入gitlab-www组</span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># usermod -a -G gitlab-www nginx</span></span><br><span class="line"></span><br><span class="line">修改配置</span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># vim /etc/gitlab/gitlab.rb </span></span><br><span class="line">web_server[<span class="string">'external_users'</span>] = [<span class="string">'nginx'</span>]</span><br><span class="line"><span class="preprocessor"># web_server[<span class="string">'username'</span>] = <span class="string">'gitlab-www'</span></span></span><br><span class="line"><span class="preprocessor"># web_server[<span class="string">'group'</span>] = <span class="string">'gitlab-www'</span></span></span><br></pre></td></tr></table></figure></p>
<p>gitlab程序未启动的问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015</span>/<span class="number">11</span>/<span class="number">03</span> <span class="number">15</span>:<span class="number">41</span>:<span class="number">02</span> [error] <span class="number">8931</span><span class="preprocessor">#<span class="number">0</span>: *<span class="number">8</span> connect() to unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket failed (<span class="number">111</span>: Connection refused) while connecting to upstream, client: <span class="number">111.161</span><span class="number">.77</span><span class="number">.240</span>, server: git.yuzhewo.com, request: <span class="string">"GET / HTTP/1.1"</span>, upstream: <span class="string">"http://unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket:/"</span>, host: <span class="string">"git.yuzhewo.com"</span></span></span><br></pre></td></tr></table></figure></p>
<p>报错信息为(111: Connection refused)<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/var/</span>opt<span class="regexp">/gitlab/gi</span>tlab-rails<span class="regexp">/sockets/gi</span>tlab.socket 内容为空</span><br></pre></td></tr></table></figure></p>
<p>怀疑gitlab服务未启动，查询启动日志，发现如下错误<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2015</span>-<span class="number">11</span>-<span class="number">03</span>T16:<span class="number">12</span>:<span class="number">06</span>+<span class="number">00</span>:<span class="number">00</span>] ERROR: Cannot allocate memory - fork(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<p>原因可能是系统内存不足，无法分配足够内存，导致启动失败，这种情况只能升级服务器配置来解决。</p>
<p>参考资料：<br><a href="https://ruby-china.org/topics/5113" target="_blank" rel="external">https://ruby-china.org/topics/5113</a><br><a href="http://doc.gitlab.com/ce/install/requirements.html" target="_blank" rel="external">http://doc.gitlab.com/ce/install/requirements.html</a><br><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/516" target="_blank" rel="external">https://gitlab.com/gitlab-org/omnibus-gitlab/issues/516</a><br><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#change-the-default-port-and-the-ssl-certificate-locations" target="_blank" rel="external">https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#change-the-default-port-and-the-ssl-certificate-locations</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>通过gitlab官方源安装好gitlab之后，程序包中会自带一个nginx服务器，gitlab本身消耗系统资源严重，理论上最好单独部署在一台服务器上，但是为了节约成本，也会跟其他服务共用服务器，如果之前机器上就有nginx服务则会冲突，可以修改配置，使用已经存在的nginx]]>
    </summary>
    
      <category term="gitlab" scheme="http://www.yuzhewo.com/tags/gitlab/"/>
    
      <category term="nginx" scheme="http://www.yuzhewo.com/tags/nginx/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在linux下通过yum搭建gitlab服务器]]></title>
    <link href="http://www.yuzhewo.com/2015/11/03/%E5%9C%A8linux%E4%B8%8B%E9%80%9A%E8%BF%87yum%E6%90%AD%E5%BB%BAgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.yuzhewo.com/2015/11/03/在linux下通过yum搭建gitlab服务器/</id>
    <published>2015-11-03T14:43:28.000Z</published>
    <updated>2015-11-04T01:34:24.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>检查您的服务器满足的硬件要求。GitLab 包是专为64位系统。对于32位操作系统，可以考虑替代的安装方法。</p>
</blockquote>
<p>1.安装并配置必要的依赖</p>
<p>如果您安装Postfix的发送电子邮件，请在安装过程中选择“Internet站点”。而不是使用后缀的，你也可以使用sendmail或配置自定义SMTP服务器。如果你想利用Exim，请其配置为SMTP服务器。</p>
<p>在CentOS 6和7，下面的命令也将开放HTTP和系统防火墙的SSH访问。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="operator"><span class="keyword">install</span> curl openssh-<span class="keyword">server</span> postfix cronie</span><br><span class="line">sudo service postfix <span class="keyword">start</span></span><br><span class="line">sudo chkconfig postfix <span class="keyword">on</span></span><br><span class="line">sudo lokkit -s <span class="keyword">http</span> -s ssh</span></span><br></pre></td></tr></table></figure></p>
<p>2.添加GitLab包服务器和安装包<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http<span class="variable">s:</span>//packages.gitlab.<span class="keyword">com</span>/install/repositories/gitlab/gitlab-<span class="keyword">ce</span>/script.rpm.<span class="keyword">sh</span> | sudo bash</span><br><span class="line">sudo yum install gitlab-<span class="keyword">ce</span></span><br></pre></td></tr></table></figure></p>
<p>如果你不习惯通过管道安装脚本资源库，你可以找到<a href="https://packages.gitlab.com/gitlab/gitlab-ce/install" target="_blank" rel="external">在这里整个脚本</a>。<br>另外，您可以<a href="https://packages.gitlab.com/gitlab/gitlab-ce" target="_blank" rel="external">选择手动下载软件包</a>安装使用<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LJO http<span class="variable">s:</span>//packages.gitlab.<span class="keyword">com</span>/gitlab/gitlab-<span class="keyword">ce</span>/packages/<span class="keyword">el</span>/<span class="number">6</span>/gitlab-<span class="keyword">ce</span>-XXX.rpm/download</span><br><span class="line">rpm -<span class="keyword">i</span> gitlab-<span class="keyword">ce</span>-XXX.rpm</span><br></pre></td></tr></table></figure></p>
<p>3.配置和启动GitLab<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置服务器域名：</span><br><span class="line">[root<span class="constant">@vultr</span> ~]<span class="preprocessor"># vim /etc/gitlab/gitlab.rb</span></span><br><span class="line">external_url <span class="string">'http://gitlab.xxxx.com'</span></span><br><span class="line"></span><br><span class="line">应用配置并启动：</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>
<p>4.在浏览器中访问主机并登录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：root </span><br><span class="line">密码：<span class="number">5</span>iveL!fe</span><br></pre></td></tr></table></figure></p>
<p>参考资料：<br><a href="https://about.gitlab.com/downloads/#centos6" target="_blank" rel="external">https://about.gitlab.com/downloads/#centos6</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>检查您的服务器满足的硬件要求。GitLab 包是专为64位系统。对于32位操作系统，可以考虑替代的安装方法。</p>
</blockquote>
<p>1.安装并配置必要的依赖</p>
<p>如果您安装Postfix的发送电子邮件，请在安装过程中选]]>
    </summary>
    
      <category term="gitlab" scheme="http://www.yuzhewo.com/tags/gitlab/"/>
    
      <category term="linux" scheme="http://www.yuzhewo.com/tags/linux/"/>
    
      <category term="yum" scheme="http://www.yuzhewo.com/tags/yum/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[$_POST $HTTP_RAW_POST_DATA和php://input的区别]]></title>
    <link href="http://www.yuzhewo.com/2015/11/02/POST-HTTP-RAW-POST-DATA%E5%92%8Cphp-input%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.yuzhewo.com/2015/11/02/POST-HTTP-RAW-POST-DATA和php-input的区别/</id>
    <published>2015-11-01T23:46:33.000Z</published>
    <updated>2015-11-04T15:00:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HTML_&lt;form&lt;_标签的_enctype_属性">HTML &lt;form&lt; 标签的 enctype 属性</h2><p>首先来了解什么是 &lt;form&lt; 标签的 enctype 属性，enctype 属性规定了在发送到服务器之前应该如何对表单数据进行编码，有三种类型：</p>
<pre>
|          属性值*                    | *描述*                                                                           
| application/x-www-form-urlencoded  | 默认模式，在发送到服务器之前，所有字符都会进行编码（空格转换为 “+” 加号，特殊符号转换为 ASCII HEX 值）
| multipart/form-data                | 不对字符编码，在使用包含文件上传控件的表单时，必须使用该值。 
| text/plain                         | 空格转换为 “+” 加号，但不对特殊字符编码。 
</pre>


<p>当在网页提交了一个表单之后，可以使用三种 PHP 方式来获取 Post 数据：$_POST，$HTTP_RAW_POST_DATA，and php://input，有什么区别呢？</p>
<h2 id="$_POST">$_POST</h2><p>$_POST 是获取表单 POST 过来数据（body部分）的最常用方法，上传的文件信息使用 $_FILES 获取。</p>
<h2 id="$HTTP_RAW_POST_DATA">$HTTP_RAW_POST_DATA</h2><p>当浏览器从表单发送 POST 请求的时候，默认的 media type 是 “application/x-www-form-urlencoded”，意思就是字段名和值都编码了，每个 key-value 对使用 ‘&amp;’ 字符分隔开，key 和 value 使用 ‘=’ 分开，并且 key 和 value 中的空格都会被替换成 + ，其他特殊字符都会被使用 urlencode 方式进行编码。</p>
<p>比如下面的 key-value 对：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">name</span>: <span class="string">Jonathan Doe</span></span><br><span class="line"><span class="attribute">age</span>: <span class="string">23</span></span><br><span class="line"><span class="attribute">formula</span>: <span class="string">a + b == 13%!</span></span><br></pre></td></tr></table></figure></p>
<p>会被编码下面的原始数据：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=Jonathan+Doe&amp;age=<span class="number">23</span>&amp;formula=a+%<span class="number">2</span>B+b+%<span class="number">3</span>D%<span class="number">3</span>D+<span class="number">13</span>%<span class="number">25</span>%<span class="number">21</span></span><br></pre></td></tr></table></figure></p>
<p>PHP 会解析这些原始的 POST 数据，并且格式化成数组，填充到 $_POST 中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [name] =&gt; Jonathan Doe</span><br><span class="line">    [age] =&gt; <span class="number">23</span></span><br><span class="line">    [formula] =&gt; a + b == <span class="number">13</span>%!</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>$HTTP_RAW_POST_DATA 是 PHP 的一个预定义的变量，用来获取原始的 POST 数据，比如上面的情况下，$HTTP_RAW_POST_DATA 的值就是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=Jonathan+Doe&amp;age=<span class="number">23</span>&amp;formula=a+%<span class="number">2</span>B+b+%<span class="number">3</span>D%<span class="number">3</span>D+<span class="number">13</span>%<span class="number">25</span>%<span class="number">21</span></span><br></pre></td></tr></table></figure></p>
<p>但是 $HTTP_RAW_POST_DATA 需要在 php.ini 中设置开启：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">always_populate_raw_post_data = <span class="value"><span class="keyword">On</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>还有一点，$HTTP_RAW_POST_DATA 不支持 enctype=”multipart/form-data” 方式传递的数据，这种情况下，我们要用 $_POST 获取字段的内容，$_FILES 来获取上传的文件信息。</p>
<h2 id="php://input">php://input</h2><p>由于 $HTTP_RAW_POST_DATA 取决于 pho.ini 设置，有没有更好的方法呢？</p>
<p>我们可以使用 php://input 来获取原始的 POST 数据，并且 php://input 比 $HTTP_RAW_POST_DATA 更少消耗内存，当然 php://input 和 $HTTP_RAW_POST_DATA 一样，它也不支持 enctype=”multipart/form-data” 方式传递的数据。</p>
<p>由于 php://input 只是数据流，我们可以使用 file_get_contents() 函数去获取它的内容：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span>_data = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">print_r(<span class="variable">$post</span>_data);</span><br></pre></td></tr></table></figure></p>
<p>获取到的内容和 $HTTP_RAW_POST_DATA 是一样的。</p>
<p>原始的 POST 数据有什么用？</p>
<p>那么原始的 POST 数据有什么用？因为很多时候，接收到不是网页 POST 过来的数据，而是可能通过其他方式 POST 过来的 “text/xml” 格式的数据，这些内容无法解析成 $_POST 数组，这个时候我们就需要原始的 POST 数据进行处理。</p>
<p>原文地址：<br><a href="http://blog.wpjam.com/m/post-http_raw_post_data-php-input/" target="_blank" rel="external">http://blog.wpjam.com/m/post-http_raw_post_data-php-input/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="HTML_&lt;form&lt;_标签的_enctype_属性">HTML &lt;form&lt; 标签的 enctype 属性</h2><p>首先来了解什么是 &lt;form&lt; 标签的 enctype 属性，enctype 属性规定了在发送到服务器之]]>
    </summary>
    
      <category term="HTTP_RAW_POST_DATA" scheme="http://www.yuzhewo.com/tags/HTTP-RAW-POST-DATA/"/>
    
      <category term="php" scheme="http://www.yuzhewo.com/tags/php/"/>
    
      <category term="php://input" scheme="http://www.yuzhewo.com/tags/php-input/"/>
    
      <category term="编程基础" scheme="http://www.yuzhewo.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何开启nginx服务的rewrite_log]]></title>
    <link href="http://www.yuzhewo.com/2015/11/01/%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFnginx%E6%9C%8D%E5%8A%A1%E7%9A%84rewrite-log/"/>
    <id>http://www.yuzhewo.com/2015/11/01/如何开启nginx服务的rewrite-log/</id>
    <published>2015-11-01T07:17:59.000Z</published>
    <updated>2015-11-01T07:35:25.000Z</updated>
    <content type="html"><![CDATA[<p>在使用nginx服务器时，时常用到nginx的伪静态URL重新功能，由于重新条件太多或者书写条件有问题，导致无法正确匹配，要想排查问题，就需要开启nginx的rewrite_log日志，便于查找问题所在。</p>
<p>rewrite_log官方介绍如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：rewrite_log <span class="keyword">on</span>|<span class="keyword">off</span>;</span><br><span class="line">默认值：rewrite_log <span class="keyword">off</span>;</span><br><span class="line">作用域：http,server,location,<span class="keyword">if</span></span><br></pre></td></tr></table></figure></p>
<p>开启或关闭日志输出，并以notice级别打印rewrite处理日志到error log文件。</p>
<p>使用方法：<br>在需要测试的配置文件的server字段中，添加如下代码：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewrite_log <span class="function_start"><span class="keyword">on</span></span>；</span><br><span class="line">error_log logs/xxxerror.<span class="command">log</span> notice;</span><br></pre></td></tr></table></figure></p>
<p>1、将rewrite_log设置开启<br>2、将error_log报警级别设置为notice，因为rewrite匹配信息为notice级别。</p>
<hr>
<p>另一方法是直接将日志级别设为debug，此时所有日志都会输出，可用管道符加grep过略，不建议使用此方法。</p>
<hr>
<blockquote>
<p>notice级别报警会生成大量日志，测试完成后记得及时关闭日志输出。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用nginx服务器时，时常用到nginx的伪静态URL重新功能，由于重新条件太多或者书写条件有问题，导致无法正确匹配，要想排查问题，就需要开启nginx的rewrite_log日志，便于查找问题所在。</p>
<p>rewrite_log官方介绍如下：<br><figu]]>
    </summary>
    
      <category term="nginx" scheme="http://www.yuzhewo.com/tags/nginx/"/>
    
      <category term="rewrite" scheme="http://www.yuzhewo.com/tags/rewrite/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo主题maupassant添加CNZZ统计]]></title>
    <link href="http://www.yuzhewo.com/2015/11/01/Hexo%E4%B8%BB%E9%A2%98maupassant%E6%B7%BB%E5%8A%A0CNZZ%E7%BB%9F%E8%AE%A1/"/>
    <id>http://www.yuzhewo.com/2015/11/01/Hexo主题maupassant添加CNZZ统计/</id>
    <published>2015-11-01T01:55:09.000Z</published>
    <updated>2015-11-01T07:14:09.000Z</updated>
    <content type="html"><![CDATA[<p>安装好Hexo博客之后，想要给博客加一下统计代码，国内比较流行的统计代码有51la、cnzz、baidu、腾讯统计等，根据使用习惯和功能来看，比较习惯于CNZZ的统计后台使用，所以选择了CNZZ。</p>
<p>确定好统计代码用CNZZ之后，就要动手添加了，为了让全站页面都被统计到，当然应该把统计代码加到模板中的base页面或者footer页脚。但是网上查到的修改教程都是针对于ejs模板的修改，而maupassant这个主题是基于jade的。</p>
<p>但是添加模板区块的大致流程是一样的，无外乎以下几个步骤：</p>
<ol>
<li>在_config.yml中开启统计 例如：cnzz: true</li>
<li>在模板中根据配置判断，加载显示统计代码</li>
<li>由于CNZZ默认会显示一个图标，与网站风格不符，需要隐藏掉</li>
</ol>
<p>上面步骤是一般的流程，优点在于可以控制统计代码关闭，当然如果模板只想自己使用，可以直接在模板中写死，省时省力。</p>
<p>首先呢，你得先去申请一个统计代码[<a href="http://zhanzhang.cnzz.com/" target="_blank" rel="external">http://zhanzhang.cnzz.com/</a>]</p>
<p>修改配置文件<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Analytics</span></span><br><span class="line">analytics:</span><br><span class="line">  cnzz: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>之所以写两级配置是为了可以插入多个统计</p>
<p>接着进行模板的修改，在主题目录下的layout文件加下，新建一个analytics.jade文件，在文件中新建如下代码<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.analytics</span><br><span class="line">  <span class="keyword">if</span> theme.analytics.cnzz</span><br><span class="line">    script.</span><br><span class="line">      var cnzz_protocol = ((<span class="string">"https:"</span> == document.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);</span><br><span class="line">      document.<span class="keyword">write</span>(unescape(<span class="string">"<span class="variable">%3Cspan</span> id='cnzz_stat_icon_XXXXXXXXXX'<span class="variable">%3E</span><span class="variable">%3C</span>/span<span class="variable">%3E</span><span class="variable">%3Cscript</span> src='"</span> + cnzz_protocol + <span class="string">"s4.cnzz.com/z_stat.php<span class="variable">%3Fid</span><span class="variable">%3DXXXXXXXXXX</span><span class="variable">%26show</span><span class="variable">%3Dpic</span>' type='text/javascript'<span class="variable">%3E</span><span class="variable">%3C</span>/script<span class="variable">%3E</span>"</span>));</span><br></pre></td></tr></table></figure></p>
<p>上面代码表示的意思为，建一div标签，class为analytics，然后判断配置中analytics.cnzz是否为true，如果开启，则显示一个script标签，其内容为在CNZZ后台获得的js，需要把script标签去掉，其他部分无需修改</p>
<p>然后在base.jade文件中引入新建的区块<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">include</span> _partial/analytics</span></span><br></pre></td></tr></table></figure></p>
<p>至此统计代码即以引入页面，只不过会有一个CNZZ的图标，这个我是觉对不能忍的，如果你不在意，则下面步骤可跳过</p>
<p>最后通过样式把统计图标隐藏掉<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.analytics</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>此模板中样式为scss，有时修改无法生效，需要清缓存后才会生成最终CSS，可以之前clean命令清除缓存<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> clean</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<p>至此，统计代码添加完成，ejs模板修改步骤类似，网上资料众多，两者唯一不同在于语法，稍微了解即可做模板修改的简单工作了~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>安装好Hexo博客之后，想要给博客加一下统计代码，国内比较流行的统计代码有51la、cnzz、baidu、腾讯统计等，根据使用习惯和功能来看，比较习惯于CNZZ的统计后台使用，所以选择了CNZZ。</p>
<p>确定好统计代码用CNZZ之后，就要动手添加了，为了让全站页面都]]>
    </summary>
    
      <category term="CNZZ" scheme="http://www.yuzhewo.com/tags/CNZZ/"/>
    
      <category term="Hexo" scheme="http://www.yuzhewo.com/tags/Hexo/"/>
    
      <category term="maupassant" scheme="http://www.yuzhewo.com/tags/maupassant/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[XML中CDATA的作用]]></title>
    <link href="http://www.yuzhewo.com/2015/10/29/XML%E4%B8%ADCDATA%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://www.yuzhewo.com/2015/10/29/XML中CDATA的作用/</id>
    <published>2015-10-29T03:47:47.000Z</published>
    <updated>2015-11-03T00:19:29.000Z</updated>
    <content type="html"><![CDATA[<p>操作XML文件时，如果允许用户输入内容，例如∶”&lt;”、”&gt;”、”/“、””等，当生成XML时，会破坏了XML结构，使数据中断。</p>
<p>这就要用XML CDATA</p>
<p>在XML文档中的所有文本都会被解析器解析。</p>
<p>只有在CDATA部件之内的文本会被解析器忽略。</p>
<h2 id="解析数据">解析数据</h2><p>XML 解析器通常情况下会处理XML文档中的所有文本。</p>
<p>当XML元素被解析的时候，XML元素内部的文本也会被解析:</p>
<p>&lt; message&gt;This text is also parsed&lt; /message&gt;</p>
<p>XML解析器这样做的原因是XML元素内部可能还包含了别的元素，像下面的例子，name元素内部包含了first和last两个元素:</p>
<p>&lt; name&gt;&lt; first&gt;Bill&lt; /first&gt;&lt; last&gt;Gates&lt; /last&gt;&lt; /name&gt;</p>
<p>解析器会认为上面的代码是这样的:</p>
<p>&lt; name&gt;<br>&lt; first&gt;Bill&lt; /first&gt;<br>&lt; last&gt;Gates&lt; /last&gt;<br>&lt; /name&gt;</p>
<h2 id="转义字符">转义字符</h2><p>不合法的XML字符必须被替换为相应的实体。</p>
<p>如果在XML文档中使用类似”&lt; “ 的字符, 那么解析器将会出现错误，因为解析器会认为这是一个新元素的开始。所以不应该象下面那样书写代码:</p>
<p>&lt; message&gt;if salary &lt; 1000 then&lt; /message&gt;</p>
<p>为了避免出现这种情况，必须将字符”&lt; “ 转换成实体，象下面这样:</p>
<p>&lt; message&gt;if salary &amp;lt 1000 then&lt; /message&gt;</p>
<p>下面是五个在XML文档中预定义好的实体:</p>
<p>小于号 大于号 &amp; 单引号 双引号</p>
<p>实体必须以符号”&amp;”开头，以符号”;”结尾。<br>注意: 只有”&lt; “ 字符和”&amp;”字符对于XML来说是严格禁止使用的。剩下的都是合法的，为了减少出错，使用实体是一个好习惯。</p>
<h2 id="CDATA部件">CDATA部件</h2><p>在CDATA内部的所有内容都会被解析器忽略。</p>
<p>某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。</p>
<p>CDATA 部分中的所有内容都会被解析器忽略。</p>
<p>CDATA 部分由 “&lt;![CDATA[“ 开始，由 “]]&gt;” 结束：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt; <span class="attribute">script</span>&gt;</span>  </span><br><span class="line"><span class="cdata">&lt;![CDATA[  </span><br><span class="line">function matchwo(a,b) </span><br><span class="line"></span></span><span class="expression">&#123; </span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> (<span class="variable">a</span> &lt; <span class="variable">b</span> &amp;&amp; <span class="variable">a</span> &lt; 0) <span class="variable">then</span> </span><br><span class="line">  &#123; </span><br><span class="line">  <span class="variable">return</span> 1; </span><br><span class="line">  &#125;</span><span class="xml"><span class="cdata"> </span><br><span class="line">else </span><br><span class="line">  </span></span><span class="expression">&#123; </span><br><span class="line">  <span class="variable">return</span> 0; </span><br><span class="line">  &#125;</span><span class="xml"><span class="cdata"> </span><br><span class="line">&#125; </span><br><span class="line">]]&gt;</span></span><br><span class="line"><span class="tag">&lt;/ <span class="attribute">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在上面的例子中，解析器会忽略 CDATA 部分中的所有内容。</p>
<p>关于 CDATA 部分的注释：</p>
<p>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。</p>
<p>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>操作XML文件时，如果允许用户输入内容，例如∶”&lt;”、”&gt;”、”/“、””等，当生成XML时，会破坏了XML结构，使数据中断。</p>
<p>这就要用XML CDATA</p>
<p>在XML文档中的所有文本都会被解析器解析。</p>
<p>只有在CDATA部件]]>
    </summary>
    
      <category term="CDATA" scheme="http://www.yuzhewo.com/tags/CDATA/"/>
    
      <category term="XML" scheme="http://www.yuzhewo.com/tags/XML/"/>
    
      <category term="编程基础" scheme="http://www.yuzhewo.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在Mac电脑上安装Octopress]]></title>
    <link href="http://www.yuzhewo.com/2015/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Mac%E7%94%B5%E8%84%91%E4%B8%8A%E5%AE%89%E8%A3%85Octopress/"/>
    <id>http://www.yuzhewo.com/2015/10/27/如何在Mac电脑上安装Octopress/</id>
    <published>2015-10-27T05:53:26.000Z</published>
    <updated>2015-11-01T07:13:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="环境的配置">环境的配置</h3><p>本地安装Octopress仅需要Git与Ruby两个软件  </p>
<p>Git环境监测<br><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">git version <span class="number">2.3</span>.<span class="number">2</span> (Apple Git-<span class="number">55</span>)</span><br></pre></td></tr></table></figure></p>
<p>Ruby环境监测<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby --version       </span><br><span class="line">ruby <span class="number">2.0</span><span class="number">.0</span>p481 (<span class="number">2014</span>-<span class="number">05</span>-<span class="number">08</span> revision <span class="number">45883</span>) [universal.x86_64-darwin14]</span><br></pre></td></tr></table></figure></p>
<p>如果提示未发现命令，自行查找安装方式  </p>
<h3 id="安装Octopress">安装Octopress</h3><p>1、克隆Octopress代码到本地<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="string">git:</span><span class="comment">//github.com/imathis/octopress.git octopress</span></span><br><span class="line">Cloning into <span class="string">'octopress'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">10795</span>, done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">10795</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">10795</span></span><br><span class="line">Receiving <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10795</span><span class="regexp">/10795), 2.84 MiB | 23.00 KiB/</span>s, done.</span><br><span class="line">Resolving <span class="string">deltas:</span> <span class="number">100</span>% (<span class="number">5192</span>/<span class="number">5192</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure></p>
<p>2、切换到octopress目录，安装bundler<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(master) sudo gem install bundler</span><br><span class="line">Fetching: bundler-<span class="number">1.9</span><span class="number">.9</span>.gem (<span class="number">100</span>%)</span><br><span class="line">Successfully installed bundler-<span class="number">1.9</span><span class="number">.9</span></span><br><span class="line">Parsing documentation <span class="keyword">for</span> bundler-<span class="number">1.9</span><span class="number">.9</span></span><br><span class="line">Installing ri documentation <span class="keyword">for</span> bundler-<span class="number">1.9</span><span class="number">.9</span></span><br><span class="line">Done installing documentation <span class="keyword">for</span> bundler after <span class="number">5</span> seconds</span><br><span class="line"><span class="number">1</span> gem installed</span><br></pre></td></tr></table></figure></p>
<p>3、执行bundler安装命令，会执行速度非常慢<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">octopress <span class="string">git:</span>(master) bundler install</span><br><span class="line">Fetching gem metadata from <span class="string">https:</span><span class="comment">//rubygems.org/.........</span></span><br></pre></td></tr></table></figure></p>
<p>打开项目目录下的Gemfile文件，修改gem源为<a href="http://ruby.taobao.org" target="_blank" rel="external">http://ruby.taobao.org</a> ，然后再次执行命令<br><figure class="highlight"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#34;http://ruby.taobao.org&#34;</span><br></pre></td></tr></table></figure></p>
<p>3、安装默认主题<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(master) ✗ rake <span class="operator"><span class="keyword">install</span></span><br><span class="line">## Copying classic theme <span class="keyword">into</span> ./<span class="keyword">source</span> <span class="keyword">and</span> ./sass</span><br><span class="line">mkdir -<span class="keyword">p</span> <span class="keyword">source</span></span><br><span class="line">cp -r .themes/classic/<span class="keyword">source</span>/. <span class="keyword">source</span></span><br><span class="line">mkdir -<span class="keyword">p</span> sass</span><br><span class="line">cp -r .themes/classic/sass/. sass</span><br><span class="line">mkdir -<span class="keyword">p</span> <span class="keyword">source</span>/_posts</span><br><span class="line">mkdir -<span class="keyword">p</span> <span class="keyword">public</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="生成博客页与单页">生成博客页与单页</h3><p>生成静态页面<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(master) ✗ rake <span class="keyword">generate</span>   </span><br><span class="line">## Generating Site <span class="keyword">with</span> Jekyll</span><br><span class="line">directory source/stylesheets</span><br><span class="line">    write source/stylesheets/screen.css</span><br><span class="line"><span class="keyword">Configuration</span> <span class="keyword">file</span>: /Users/yuzhiguo/Source/GitHub/octopress/_config.yml</span><br><span class="line">            Source: source</span><br><span class="line">       Destination: public</span><br><span class="line">      Generating... </span><br><span class="line">                    done.</span><br><span class="line"> Auto-regeneration: disabled. <span class="keyword">Use</span> <span class="comment">--watch to enable.</span></span><br></pre></td></tr></table></figure></p>
<p>开启预览服务<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(source) ✗ rake preview</span><br><span class="line">Starting <span class="keyword">to</span> watch source <span class="keyword">with</span> Jekyll <span class="keyword">and</span> Compass. Starting Rack <span class="keyword">on</span> <span class="keyword">port</span> <span class="number">4000</span></span><br><span class="line"><span class="keyword">Configuration</span> <span class="keyword">file</span>: /Users/yuzhiguo/Source/octopress/_config.yml</span><br><span class="line">&gt;&gt;&gt; Compass <span class="keyword">is</span> watching <span class="keyword">for</span> changes. Press Ctrl-C <span class="keyword">to</span> Stop.</span><br></pre></td></tr></table></figure></p>
<p>在浏览器中输入：<a href="http://127.0.0.1:4000" target="_blank" rel="external">http://127.0.0.1:4000</a></p>
<p>参考网站：<br><a href="http://ruby.taobao.org/" target="_blank" rel="external">http://ruby.taobao.org/</a><br><a href="http://octopress.org/docs/setup/" target="_blank" rel="external">http://octopress.org/docs/setup/</a><br><a href="https://git-scm.com/download/mac" target="_blank" rel="external">https://git-scm.com/download/mac</a><br><a href="https://www.ruby-lang.org/en/documentation/installation/#homebrew" target="_blank" rel="external">https://www.ruby-lang.org/en/documentation/installation/#homebrew</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="环境的配置">环境的配置</h3><p>本地安装Octopress仅需要Git与Ruby两个软件  </p>
<p>Git环境监测<br><figure class="highlight bash"><figcaption><span>bash</span></f]]>
    </summary>
    
      <category term="Mac" scheme="http://www.yuzhewo.com/tags/Mac/"/>
    
      <category term="Octopress" scheme="http://www.yuzhewo.com/tags/Octopress/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是Octopress]]></title>
    <link href="http://www.yuzhewo.com/2015/10/27/%E4%BB%80%E4%B9%88%E6%98%AFOctopress/"/>
    <id>http://www.yuzhewo.com/2015/10/27/什么是Octopress/</id>
    <published>2015-10-27T05:51:05.000Z</published>
    <updated>2015-11-04T10:40:08.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是Octopress">什么是Octopress</h3><p>Octopress 是一个基于Jekyll的静态博客站点生成系统，它很大程度上简化了用Jekyll搭建博客的过程。</p>
<p>相对于WordPress来说优势：</p>
<blockquote>
<ul>
<li>不依赖于数据库，不存在数据库崩溃导致数据丢失的问题。</li>
<li>可以直接部署在github上的免费空间内。</li>
<li>无过多功能模块，没有用户系统等无关内容的功能。</li>
<li>纯静态页面，加载速度快。</li>
<li>使用markdown语法书写博客。</li>
<li>代码存放在github上，不存在数据丢失问题。</li>
</ul>
</blockquote>
<p>A blogging framework for hackers.</p>
<p>一个非常适合程序员使用的博客系统</p>
<p>使用流程</p>
<p>搭建环境 -&gt; 纯文本书写博客 -&gt; 生成静态网页 -&gt; 本地预览 -&gt; 部署</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是Octopress">什么是Octopress</h3><p>Octopress 是一个基于Jekyll的静态博客站点生成系统，它很大程度上简化了用Jekyll搭建博客的过程。</p>
<p>相对于WordPress来说优势：</p>
<blockquote]]>
    </summary>
    
      <category term="Octopress" scheme="http://www.yuzhewo.com/tags/Octopress/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[欢迎光临本站]]></title>
    <link href="http://www.yuzhewo.com/2015/10/27/%E6%AC%A2%E8%BF%8E%E5%85%89%E4%B8%B4%E6%9C%AC%E7%AB%99/"/>
    <id>http://www.yuzhewo.com/2015/10/27/欢迎光临本站/</id>
    <published>2015-10-27T05:00:26.000Z</published>
    <updated>2015-11-01T07:13:46.000Z</updated>
    <content type="html"><![CDATA[<p>欢迎使用<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! 这是这是一篇示例发布。 更多信息请查看<a href="http://hexo.io/docs/" target="_blank" rel="external">官方文档</a>。使用过程中发现任何问题，欢迎反馈<a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">问题反馈</a>或者在项目主要提出问题<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>。</p>
<h2 id="快速入门">快速入门</h2><h3 id="新建一篇文章">新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="启动预览服务">启动预览服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="生成静态文件">生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="部署博客到远端服务器">部署博客到远端服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>欢迎使用<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! 这是这是一篇示例发布。 更多信息请查看<a href="http://hexo.io/docs/" target="_blank" ]]>
    </summary>
    
      <category term="Hexo" scheme="http://www.yuzhewo.com/tags/Hexo/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
</feed>
