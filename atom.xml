<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[幻城]]></title>
  <subtitle><![CDATA[虚幻世界中的一员]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.yuzhewo.com/"/>
  <updated>2015-11-04T01:34:21.000Z</updated>
  <id>http://www.yuzhewo.com/</id>
  
  <author>
    <name><![CDATA[yuzhewo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[修改gitlab使用现有nginx服务及502问题解决]]></title>
    <link href="http://www.yuzhewo.com/2015/11/03/%E4%BF%AE%E6%94%B9gitlab%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89nginx%E6%9C%8D%E5%8A%A1%E5%8F%8A502%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.yuzhewo.com/2015/11/03/修改gitlab使用现有nginx服务及502问题解决/</id>
    <published>2015-11-03T15:21:38.000Z</published>
    <updated>2015-11-04T01:34:21.000Z</updated>
    <content type="html"><![CDATA[<p>通过gitlab官方源安装好gitlab之后，程序包中会自带一个nginx服务器，gitlab本身消耗系统资源严重，理论上最好单独部署在一台服务器上，但是为了节约成本，也会跟其他服务共用服务器，如果之前机器上就有nginx服务则会冲突，可以修改配置，使用已经存在的nginx。</p>
<h4 id="修改gitlab使用现有nginx服务">修改gitlab使用现有nginx服务</h4><p>修改gitlab.rb配置文件<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># vim /etc/gitlab/gitlab.rb </span></span><br><span class="line"></span><br><span class="line">在配置文件中搜索 /<span class="preprocessor"># nginx</span></span><br><span class="line"><span class="preprocessor"># nginx[<span class="string">'enable'</span>] = true</span></span><br><span class="line"><span class="preprocessor"># nginx[<span class="string">'client_max_body_size'</span>] = <span class="string">'250m'</span></span></span><br><span class="line"><span class="preprocessor"># nginx[<span class="string">'redirect_http_to_https'</span>] = false</span></span><br><span class="line"></span><br><span class="line">修改上面配置为<span class="literal">false</span></span><br><span class="line">nginx[<span class="string">'enable'</span>] = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>将gitlab生成的nginx配置复制到nginx虚拟主机配置文件夹下</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">拷贝配置：</span><br><span class="line">[root@yuzhewo ~]# cp /<span class="keyword">var</span>/opt/gitlab/nginx/<span class="keyword">conf</span>/gitlab-http.<span class="keyword">conf</span> /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/</span><br><span class="line"></span><br><span class="line">检测配置：</span><br><span class="line">[root@yuzhewo ~]# nginx -t</span><br><span class="line">nginx: [emerg] unknown <span class="keyword">log</span> <span class="keyword">format</span> <span class="string">"gitlab_access"</span> <span class="keyword">in</span> /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/gitlab-http.<span class="keyword">conf</span>:56</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> failed</span><br></pre></td></tr></table></figure>
<p>将配置中第13行结尾的gitlab_access去掉，即可完成验证。重启nginx使配置生效。</p>
<h4 id="页面502问题">页面502问题</h4><p>替换完成后如果出现502问题，查看日志</p>
<p>权限问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yuzhewo ~]<span class="preprocessor"># tail -f /var/log/gitlab/nginx/<span class="keyword">error</span>.log </span></span><br><span class="line"></span><br><span class="line"><span class="number">2015</span>/<span class="number">11</span>/<span class="number">03</span> <span class="number">15</span>:<span class="number">45</span>:<span class="number">10</span> [error] <span class="number">8931</span><span class="preprocessor">#<span class="number">0</span>: *<span class="number">15</span> connect() to unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socketfailed (<span class="number">13</span>: Permission denied) while connecting to upstream, client: xxx.xxx.xxx.xx, server: git.xxxx.com, request: <span class="string">"GET / HTTP/1.1"</span>, upstream: <span class="string">"http://unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket:/"</span>, host: <span class="string">"git.xxxx.com"</span></span></span><br></pre></td></tr></table></figure></p>
<p>通过nginx日志可以看出，nginx没有访问gitlab的socket权限，修改方式有多种，我的机器上nginx的执行用户是nginx，而socket文件夹为<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">drwxr-x--- <span class="number">2</span> git  gitlab-www <span class="number">4096</span> <span class="number">11</span>月  <span class="number">3</span> <span class="number">15</span>:<span class="number">57</span> sockets</span><br><span class="line"></span><br><span class="line">文件赋权限</span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># chmod -R o+x /var/opt/gitlab/gitlab-rails/sockets</span></span><br><span class="line"> <span class="literal">or</span></span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># chmod 755 /var/opt/gitlab/gitlab-rails/sockets</span></span><br><span class="line"></span><br><span class="line">将nginx用户加入gitlab-www组</span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># usermod -a -G gitlab-www nginx</span></span><br><span class="line"></span><br><span class="line">修改配置</span><br><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># vim /etc/gitlab/gitlab.rb </span></span><br><span class="line">web_server[<span class="string">'external_users'</span>] = [<span class="string">'nginx'</span>]</span><br><span class="line"><span class="preprocessor"># web_server[<span class="string">'username'</span>] = <span class="string">'gitlab-www'</span></span></span><br><span class="line"><span class="preprocessor"># web_server[<span class="string">'group'</span>] = <span class="string">'gitlab-www'</span></span></span><br></pre></td></tr></table></figure></p>
<p>gitlab程序未启动的问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015</span>/<span class="number">11</span>/<span class="number">03</span> <span class="number">15</span>:<span class="number">41</span>:<span class="number">02</span> [error] <span class="number">8931</span><span class="preprocessor">#<span class="number">0</span>: *<span class="number">8</span> connect() to unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket failed (<span class="number">111</span>: Connection refused) while connecting to upstream, client: <span class="number">111.161</span><span class="number">.77</span><span class="number">.240</span>, server: git.yuzhewo.com, request: <span class="string">"GET / HTTP/1.1"</span>, upstream: <span class="string">"http://unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket:/"</span>, host: <span class="string">"git.yuzhewo.com"</span></span></span><br></pre></td></tr></table></figure></p>
<p>报错信息为(111: Connection refused)<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/var/</span>opt<span class="regexp">/gitlab/gi</span>tlab-rails<span class="regexp">/sockets/gi</span>tlab.socket 内容为空</span><br></pre></td></tr></table></figure></p>
<p>怀疑gitlab服务未启动，查询启动日志，发现如下错误<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2015</span>-<span class="number">11</span>-<span class="number">03</span>T16:<span class="number">12</span>:<span class="number">06</span>+<span class="number">00</span>:<span class="number">00</span>] ERROR: Cannot allocate memory - fork(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<p>原因可能是系统内存不足，无法分配足够内存，导致启动失败，这种情况只能升级服务器配置来解决。</p>
<p>参考资料：<br><a href="https://ruby-china.org/topics/5113" target="_blank" rel="external">https://ruby-china.org/topics/5113</a><br><a href="http://doc.gitlab.com/ce/install/requirements.html" target="_blank" rel="external">http://doc.gitlab.com/ce/install/requirements.html</a><br><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/516" target="_blank" rel="external">https://gitlab.com/gitlab-org/omnibus-gitlab/issues/516</a><br><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#change-the-default-port-and-the-ssl-certificate-locations" target="_blank" rel="external">https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#change-the-default-port-and-the-ssl-certificate-locations</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>通过gitlab官方源安装好gitlab之后，程序包中会自带一个nginx服务器，gitlab本身消耗系统资源严重，理论上最好单独部署在一台服务器上，但是为了节约成本，也会跟其他服务共用服务器，如果之前机器上就有nginx服务则会冲突，可以修改配置，使用已经存在的nginx]]>
    </summary>
    
      <category term="gitlab" scheme="http://www.yuzhewo.com/tags/gitlab/"/>
    
      <category term="nginx" scheme="http://www.yuzhewo.com/tags/nginx/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在linux下通过yum搭建gitlab服务器]]></title>
    <link href="http://www.yuzhewo.com/2015/11/03/%E5%9C%A8linux%E4%B8%8B%E9%80%9A%E8%BF%87yum%E6%90%AD%E5%BB%BAgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.yuzhewo.com/2015/11/03/在linux下通过yum搭建gitlab服务器/</id>
    <published>2015-11-03T14:43:28.000Z</published>
    <updated>2015-11-04T01:34:24.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>检查您的服务器满足的硬件要求。GitLab 包是专为64位系统。对于32位操作系统，可以考虑替代的安装方法。</p>
</blockquote>
<p>1.安装并配置必要的依赖</p>
<p>如果您安装Postfix的发送电子邮件，请在安装过程中选择“Internet站点”。而不是使用后缀的，你也可以使用sendmail或配置自定义SMTP服务器。如果你想利用Exim，请其配置为SMTP服务器。</p>
<p>在CentOS 6和7，下面的命令也将开放HTTP和系统防火墙的SSH访问。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="operator"><span class="keyword">install</span> curl openssh-<span class="keyword">server</span> postfix cronie</span><br><span class="line">sudo service postfix <span class="keyword">start</span></span><br><span class="line">sudo chkconfig postfix <span class="keyword">on</span></span><br><span class="line">sudo lokkit -s <span class="keyword">http</span> -s ssh</span></span><br></pre></td></tr></table></figure></p>
<p>2.添加GitLab包服务器和安装包<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http<span class="variable">s:</span>//packages.gitlab.<span class="keyword">com</span>/install/repositories/gitlab/gitlab-<span class="keyword">ce</span>/script.rpm.<span class="keyword">sh</span> | sudo bash</span><br><span class="line">sudo yum install gitlab-<span class="keyword">ce</span></span><br></pre></td></tr></table></figure></p>
<p>如果你不习惯通过管道安装脚本资源库，你可以找到<a href="https://packages.gitlab.com/gitlab/gitlab-ce/install" target="_blank" rel="external">在这里整个脚本</a>。<br>另外，您可以<a href="https://packages.gitlab.com/gitlab/gitlab-ce" target="_blank" rel="external">选择手动下载软件包</a>安装使用<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LJO http<span class="variable">s:</span>//packages.gitlab.<span class="keyword">com</span>/gitlab/gitlab-<span class="keyword">ce</span>/packages/<span class="keyword">el</span>/<span class="number">6</span>/gitlab-<span class="keyword">ce</span>-XXX.rpm/download</span><br><span class="line">rpm -<span class="keyword">i</span> gitlab-<span class="keyword">ce</span>-XXX.rpm</span><br></pre></td></tr></table></figure></p>
<p>3.配置和启动GitLab<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置服务器域名：</span><br><span class="line">[root<span class="constant">@vultr</span> ~]<span class="preprocessor"># vim /etc/gitlab/gitlab.rb</span></span><br><span class="line">external_url <span class="string">'http://gitlab.xxxx.com'</span></span><br><span class="line"></span><br><span class="line">应用配置并启动：</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>
<p>4.在浏览器中访问主机并登录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：root </span><br><span class="line">密码：<span class="number">5</span>iveL!fe</span><br></pre></td></tr></table></figure></p>
<p>参考资料：<br><a href="https://about.gitlab.com/downloads/#centos6" target="_blank" rel="external">https://about.gitlab.com/downloads/#centos6</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>检查您的服务器满足的硬件要求。GitLab 包是专为64位系统。对于32位操作系统，可以考虑替代的安装方法。</p>
</blockquote>
<p>1.安装并配置必要的依赖</p>
<p>如果您安装Postfix的发送电子邮件，请在安装过程中选]]>
    </summary>
    
      <category term="gitlab" scheme="http://www.yuzhewo.com/tags/gitlab/"/>
    
      <category term="linux" scheme="http://www.yuzhewo.com/tags/linux/"/>
    
      <category term="yum" scheme="http://www.yuzhewo.com/tags/yum/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos配置iptables防火墙]]></title>
    <link href="http://www.yuzhewo.com/2015/11/03/Centos%E9%85%8D%E7%BD%AEiptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://www.yuzhewo.com/2015/11/03/Centos配置iptables防火墙/</id>
    <published>2015-11-03T13:50:19.000Z</published>
    <updated>2015-11-03T14:31:34.000Z</updated>
    <content type="html"><![CDATA[<p>iptables是一个配置Linux内核防火墙的命令行工具，是netfilter项目的一部分。术语iptables也经常代指该内核级防火墙。iptables 可以直接配置，也可以通过许多前端和图形界面配置。iptables用于ipv4，ip6tables用于ipv6。</p>
<h3 id="基本概念">基本概念</h3><p>iptables 可以检测、修改、转发、重定向和丢弃 IPv4 数据包。过滤 IPv4 数据包的代码已经内置于内核中，并且按照不同的目的被组织成 表 的集合。表 由一组预先定义的 链 组成，链 包含遍历顺序规则。每一条规则包含一个谓词的潜在匹配和相应的动作（称为 目标），如果谓词为真，该动作会被执行。也就是说条件匹配。</p>
<h3 id="安装与检测">安装与检测</h3><p>常见Linux发行版都已默认安装了iptables，可以通过命令查看iptables的运行状态</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yuzhewo ~]<span class="comment"># service iptables status</span></span><br><span class="line">iptables: Firewall <span class="keyword">is</span> <span class="keyword">not</span> <span class="property">running</span>.</span><br></pre></td></tr></table></figure>
<p>如果显示上面命令说明iptables已安装但是未启动</p>
<p>如果显示下面字符说明iptables未安装<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="string">bash:</span> <span class="string">iptables:</span> command not found</span><br></pre></td></tr></table></figure></p>
<p>可执行如下命令进行安装<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># yum install iptables</span></span><br></pre></td></tr></table></figure></p>
<h3 id="服务启动与关闭">服务启动与关闭</h3><p>当服务器配置正常时候，访问服务器无响应或者被拒绝，需要考虑iptables的问题，可以尝试关闭iptables服务后测试，若可访问可以确定是iptables的问题。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">启动服务：</span><br><span class="line">[root@yuzhewo ~]# service iptables <span class="operator"><span class="keyword">start</span></span><br><span class="line">iptables: Applying firewall <span class="keyword">rules</span>:                         [  OK  ]</span><br><span class="line"></span><br><span class="line">关闭服务：</span><br><span class="line">[root@yuzhewo ~]# service iptables <span class="keyword">stop</span></span><br><span class="line">iptables: Setting chains <span class="keyword">to</span> <span class="keyword">policy</span> <span class="keyword">ACCEPT</span>: filter          [  OK  ]</span><br><span class="line">iptables: Flushing firewall <span class="keyword">rules</span>:                         [  OK  ]</span><br><span class="line">iptables: Unloading modules:                               [  OK  ]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="基础语法">基础语法</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#规则的观察与清除</span><br><span class="line"></span><br><span class="line">     iptables [-t tables] [-L] [-nv]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">t ：后面接 table ，例如 nat 或 filter ，若省略此项目，则使用默认的 filter</span><br><span class="line"></span>-<span class="ruby"><span class="constant">L</span> ：列出目前的 table 的规则</span><br><span class="line"></span>-<span class="ruby">n ：不进行 <span class="constant">IP</span> 与 <span class="constant">HOSTNAME</span> 的反查，显示讯息的速度会快很多！</span><br><span class="line"></span>-<span class="ruby">v ：列出更多的信息，包括通过该规则的封包总位数、相关的网络接口等</span><br><span class="line"></span></span><br><span class="line">     iptables [-t tables] [-FXZ]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby"><span class="constant">F</span> ：清除所有的已订定的规则；</span><br><span class="line"></span>-<span class="ruby"><span class="constant">X</span> ：杀掉所有使用者 <span class="string">"自定义"</span> 的 chain (应该说的是 tables ）啰；</span><br><span class="line"></span>-<span class="ruby"><span class="constant">Z</span> ：将所有的 chain 的计数与流量统计都归零</span><br><span class="line"></span></span><br><span class="line"></span><br><span class="line">#封包的基础比对：IP, 网域及接口装置</span><br><span class="line"></span><br><span class="line">    iptables [-AI 链名] [-io 网络接口] [-p 协议] [-s 来源IP/网域] [-d 目标IP/网域] -j [ACCEPT|DROP|REJECT|LOG]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby"><span class="constant">AI</span> 链名：针对某的链进行规则的 <span class="string">"插入"</span> 或 <span class="string">"累加"</span></span><br><span class="line"></span>    -<span class="ruby"><span class="constant">A</span> ：新增加一条规则，该规则增加在原本规则的最后面。例如原本已经有四条规则，</span><br><span class="line"></span>         使用 -A 就可以加上第五条规则！</span><br><span class="line">    -<span class="ruby"><span class="constant">I</span> ：插入一条规则。如果没有指定此规则的顺序，默认是插入变成第一条规则。</span><br><span class="line"></span>         例如原本有四条规则，使用 -I 则该规则变成第一条，而原本四条变成 2~5 号</span><br><span class="line">    链 ：有 INPUT, OUTPUT, FORWARD 等，此链名称又与 -io 有关，请看底下。</span><br><span class="line"></span><br><span class="line">-<span class="ruby">io 网络接口：设定封包进出的接口规范</span><br><span class="line"></span>    -<span class="ruby">i ：封包所进入的那个网络接口，例如 eth<span class="number">0</span>, lo 等接口。需与 <span class="constant">INPUT</span> 链配合；</span><br><span class="line"></span>    -<span class="ruby">o ：封包所传出的那个网络接口，需与 <span class="constant">OUTPUT</span> 链配合；</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby">p 协定：设定此规则适用于哪种封包格式</span><br><span class="line"></span>   主要的封包格式有： tcp, udp, icmp 及 all 。</span><br><span class="line"></span><br><span class="line">-<span class="ruby">s 来源 <span class="constant">IP</span>/网域：设定此规则之封包的来源项目，可指定单纯的 <span class="constant">IP</span> 或包括网域，例如：</span><br><span class="line"></span>   IP  ：192.168.0.100</span><br><span class="line">   网域：192.168.0.0/24, 192.168.0.0/255.255.255.0 均可。</span><br><span class="line">   若规范为『不许』时，则加上 ! 即可，例如：</span><br><span class="line">   -<span class="ruby">s ! <span class="number">192.168</span>.<span class="number">100.0</span>/<span class="number">24</span> 表示不许 <span class="number">192.168</span>.<span class="number">100.0</span>/<span class="number">24</span> 之封包来源；</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby">d 目标 <span class="constant">IP</span>/网域：同 -s ，只不过这里指的是目标的 <span class="constant">IP</span> 或网域。</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby">j ：后面接动作，主要的动作有接受(<span class="constant">ACCEPT</span>)、丢弃(<span class="constant">DROP</span>)、拒绝(<span class="constant">REJECT</span>)及记录(<span class="constant">LOG</span>)</span><br><span class="line"></span></span><br><span class="line">#TCP, UDP 的规则比对：针对端口设定</span><br><span class="line"></span><br><span class="line">    iptables [-AI 链] [-io 网络接口] [-p tcp,udp] [-s 来源IP/网域] [--sport 埠口范围] [-d 目标IP/网域] [--dport 端口范围] -j [ACCEPT|DROP|REJECT]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">-sport 埠口范围：限制来源的端口号码，端口号码可以是连续的，例如 <span class="number">1024</span><span class="symbol">:</span><span class="number">65535</span></span><br><span class="line"></span>-<span class="ruby">-dport 埠口范围：限制目标的端口号码。</span><br><span class="line"></span></span><br><span class="line">#iptables 外挂模块：mac 与 state</span><br><span class="line"></span><br><span class="line">    iptables -A INPUT [-m state] [--state 状态]</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">m ：一些 iptables 的外挂模块，主要常见的有：</span><br><span class="line"></span>     state ：状态模块</span><br><span class="line">     mac   ：网络卡硬件地址 (hardware address)</span><br><span class="line">-<span class="ruby">-state ：一些封包的状态，主要有：</span><br><span class="line"></span>     INVALID    ：无效的封包，例如数据破损的封包状态</span><br><span class="line">     ESTABLISHED：已经联机成功的联机状态；</span><br><span class="line">     NEW        ：想要新建立联机的封包状态；</span><br><span class="line">     RELATED    ：这个最常用！表示这个封包是与我们主机发送出去的封包有关</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ICMP 封包规则的比对：针对是否响应 ping 来设计</span><br><span class="line"></span><br><span class="line">    iptables -A INPUT [-p icmp] [--icmp-type 类型] -j ACCEPT</span><br><span class="line"></span><br><span class="line">选项与参数：</span><br><span class="line">-<span class="ruby">-icmp-type ：后面必须要接 <span class="constant">ICMP</span> 的封包类型，也可以使用代号，</span><br><span class="line"></span>              例如 8  代表 echo request 的意思。</span><br></pre></td></tr></table></figure>
<h3 id="配置实例">配置实例</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许来自于lo接口的数据包</span></span><br><span class="line"><span class="comment">#如果没有此规则，你将不能通过127.0.0.1访问本地服务，例如ping 127.0.0.1</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="comment">#ssh端口22</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#FTP端口21</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line"><span class="comment">#web服务端口80</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#tomcat</span></span><br><span class="line">iptables -A INPUT -p tcp --dport xxxx -j ACCEPT</span><br><span class="line"><span class="comment">#mysql</span></span><br><span class="line">iptables -A INPUT -p tcp --dport xxxx -j ACCEPT</span><br><span class="line"><span class="comment">#允许icmp包通过,也就是允许ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"><span class="comment">#允许所有对外请求的返回包</span></span><br><span class="line"><span class="comment">#本机对外请求相当于OUTPUT,对于返回数据包必须接收啊，这相当于INPUT了</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment">#如果要添加内网ip信任（接受其所有TCP请求）</span></span><br><span class="line">iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT</span><br><span class="line"><span class="comment">#过滤所有非以上规则的请求</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line"><span class="comment">#要封停一个IP，使用下面这条命令：</span></span><br><span class="line">iptables -I INPUT -s <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> -j DROP</span><br><span class="line"><span class="comment">#要解封一个IP，使用下面这条命令:</span></span><br><span class="line">iptables -D INPUT -s <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> -j DROP</span><br></pre></td></tr></table></figure>
<h3 id="保存配置">保存配置</h3><p>通过iptables命令添加的规则，需要通过iptables save命令将配置信息保存到/etc/sysconfig/iptables文件当中，保证下次启动时仍会引用配置好的规则。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="constant">@yuzhewo</span> ~]<span class="preprocessor"># service iptables save</span></span><br></pre></td></tr></table></figure></p>
<h3 id="注意事项">注意事项</h3><p>在修改iptables配置规则时，尤其时有清之前配置之时，要多开几个终端连接，防止规则错误关闭ssh端口，导致无法远程登录服务器。</p>
<p>参考资料：<br><a href="http://blog.kkyun.com/?p=50" target="_blank" rel="external">http://blog.kkyun.com/?p=50</a><br><a href="http://wsgzao.github.io/post/iptables/" target="_blank" rel="external">http://wsgzao.github.io/post/iptables/</a><br><a href="https://wiki.centos.org/zh/HowTos/Network/IPTables" target="_blank" rel="external">https://wiki.centos.org/zh/HowTos/Network/IPTables</a><br><a href="http://wiki.ubuntu.org.cn/IptablesHowTo" target="_blank" rel="external">http://wiki.ubuntu.org.cn/IptablesHowTo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iptables是一个配置Linux内核防火墙的命令行工具，是netfilter项目的一部分。术语iptables也经常代指该内核级防火墙。iptables 可以直接配置，也可以通过许多前端和图形界面配置。iptables用于ipv4，ip6tables用于ipv6。</p]]>
    </summary>
    
      <category term="centos" scheme="http://www.yuzhewo.com/tags/centos/"/>
    
      <category term="iptables" scheme="http://www.yuzhewo.com/tags/iptables/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[$_POST $HTTP_RAW_POST_DATA和php://input的区别]]></title>
    <link href="http://www.yuzhewo.com/2015/11/03/POST-HTTP-RAW-POST-DATA%E5%92%8Cphp-input%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.yuzhewo.com/2015/11/03/POST-HTTP-RAW-POST-DATA和php-input的区别/</id>
    <published>2015-11-02T23:46:33.000Z</published>
    <updated>2015-11-03T00:15:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HTML_&lt;form&lt;_标签的_enctype_属性">HTML &lt;form&lt; 标签的 enctype 属性</h2><p>首先来了解什么是 &lt;form&lt; 标签的 enctype 属性，enctype 属性规定了在发送到服务器之前应该如何对表单数据进行编码，有三种类型：</p>
<pre>
|          属性值*                    | *描述*                                                                           
| application/x-www-form-urlencoded  | 默认模式，在发送到服务器之前，所有字符都会进行编码（空格转换为 “+” 加号，特殊符号转换为 ASCII HEX 值）
| multipart/form-data                | 不对字符编码，在使用包含文件上传控件的表单时，必须使用该值。 
| text/plain                         | 空格转换为 “+” 加号，但不对特殊字符编码。 
</pre>


<p>当在网页提交了一个表单之后，可以使用三种 PHP 方式来获取 Post 数据：$_POST，$HTTP_RAW_POST_DATA，and php://input，有什么区别呢？</p>
<h2 id="$_POST">$_POST</h2><p>$_POST 是获取表单 POST 过来数据（body部分）的最常用方法，上传的文件信息使用 $_FILES 获取。</p>
<h2 id="$HTTP_RAW_POST_DATA">$HTTP_RAW_POST_DATA</h2><p>当浏览器从表单发送 POST 请求的时候，默认的 media type 是 “application/x-www-form-urlencoded”，意思就是字段名和值都编码了，每个 key-value 对使用 ‘&amp;’ 字符分隔开，key 和 value 使用 ‘=’ 分开，并且 key 和 value 中的空格都会被替换成 + ，其他特殊字符都会被使用 urlencode 方式进行编码。</p>
<p>比如下面的 key-value 对：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">name</span>: <span class="string">Jonathan Doe</span></span><br><span class="line"><span class="attribute">age</span>: <span class="string">23</span></span><br><span class="line"><span class="attribute">formula</span>: <span class="string">a + b == 13%!</span></span><br></pre></td></tr></table></figure></p>
<p>会被编码下面的原始数据：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=Jonathan+Doe&amp;age=<span class="number">23</span>&amp;formula=a+%<span class="number">2</span>B+b+%<span class="number">3</span>D%<span class="number">3</span>D+<span class="number">13</span>%<span class="number">25</span>%<span class="number">21</span></span><br></pre></td></tr></table></figure></p>
<p>PHP 会解析这些原始的 POST 数据，并且格式化成数组，填充到 $_POST 中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [name] =&gt; Jonathan Doe</span><br><span class="line">    [age] =&gt; <span class="number">23</span></span><br><span class="line">    [formula] =&gt; a + b == <span class="number">13</span>%!</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>$HTTP_RAW_POST_DATA 是 PHP 的一个预定义的变量，用来获取原始的 POST 数据，比如上面的情况下，$HTTP_RAW_POST_DATA 的值就是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=Jonathan+Doe&amp;age=<span class="number">23</span>&amp;formula=a+%<span class="number">2</span>B+b+%<span class="number">3</span>D%<span class="number">3</span>D+<span class="number">13</span>%<span class="number">25</span>%<span class="number">21</span></span><br></pre></td></tr></table></figure></p>
<p>但是 $HTTP_RAW_POST_DATA 需要在 php.ini 中设置开启：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">always_populate_raw_post_data = <span class="value"><span class="keyword">On</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>还有一点，$HTTP_RAW_POST_DATA 不支持 enctype=”multipart/form-data” 方式传递的数据，这种情况下，我们要用 $_POST 获取字段的内容，$_FILES 来获取上传的文件信息。</p>
<h2 id="php://input">php://input</h2><p>由于 $HTTP_RAW_POST_DATA 取决于 pho.ini 设置，有没有更好的方法呢？</p>
<p>我们可以使用 php://input 来获取原始的 POST 数据，并且 php://input 比 $HTTP_RAW_POST_DATA 更少消耗内存，当然 php://input 和 $HTTP_RAW_POST_DATA 一样，它也不支持 enctype=”multipart/form-data” 方式传递的数据。</p>
<p>由于 php://input 只是数据流，我们可以使用 file_get_contents() 函数去获取它的内容：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span>_data = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">print_r(<span class="variable">$post</span>_data);</span><br></pre></td></tr></table></figure></p>
<p>获取到的内容和 $HTTP_RAW_POST_DATA 是一样的。</p>
<p>原始的 POST 数据有什么用？</p>
<p>那么原始的 POST 数据有什么用？因为很多时候，接收到不是网页 POST 过来的数据，而是可能通过其他方式 POST 过来的 “text/xml” 格式的数据，这些内容无法解析成 $_POST 数组，这个时候我们就需要原始的 POST 数据进行处理。</p>
<p>原文地址：<br><a href="http://blog.wpjam.com/m/post-http_raw_post_data-php-input/" target="_blank" rel="external">http://blog.wpjam.com/m/post-http_raw_post_data-php-input/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="HTML_&lt;form&lt;_标签的_enctype_属性">HTML &lt;form&lt; 标签的 enctype 属性</h2><p>首先来了解什么是 &lt;form&lt; 标签的 enctype 属性，enctype 属性规定了在发送到服务器之]]>
    </summary>
    
      <category term="HTTP_RAW_POST_DATA" scheme="http://www.yuzhewo.com/tags/HTTP-RAW-POST-DATA/"/>
    
      <category term="php" scheme="http://www.yuzhewo.com/tags/php/"/>
    
      <category term="php://input" scheme="http://www.yuzhewo.com/tags/php-input/"/>
    
      <category term="编程基础" scheme="http://www.yuzhewo.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何开启nginx服务的rewrite_log]]></title>
    <link href="http://www.yuzhewo.com/2015/11/01/%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFnginx%E6%9C%8D%E5%8A%A1%E7%9A%84rewrite-log/"/>
    <id>http://www.yuzhewo.com/2015/11/01/如何开启nginx服务的rewrite-log/</id>
    <published>2015-11-01T07:17:59.000Z</published>
    <updated>2015-11-01T07:35:25.000Z</updated>
    <content type="html"><![CDATA[<p>在使用nginx服务器时，时常用到nginx的伪静态URL重新功能，由于重新条件太多或者书写条件有问题，导致无法正确匹配，要想排查问题，就需要开启nginx的rewrite_log日志，便于查找问题所在。</p>
<p>rewrite_log官方介绍如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：rewrite_log <span class="keyword">on</span>|<span class="keyword">off</span>;</span><br><span class="line">默认值：rewrite_log <span class="keyword">off</span>;</span><br><span class="line">作用域：http,server,location,<span class="keyword">if</span></span><br></pre></td></tr></table></figure></p>
<p>开启或关闭日志输出，并以notice级别打印rewrite处理日志到error log文件。</p>
<p>使用方法：<br>在需要测试的配置文件的server字段中，添加如下代码：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewrite_log <span class="function_start"><span class="keyword">on</span></span>；</span><br><span class="line">error_log logs/xxxerror.<span class="command">log</span> notice;</span><br></pre></td></tr></table></figure></p>
<p>1、将rewrite_log设置开启<br>2、将error_log报警级别设置为notice，因为rewrite匹配信息为notice级别。</p>
<hr>
<p>另一方法是直接将日志级别设为debug，此时所有日志都会输出，可用管道符加grep过略，不建议使用此方法。</p>
<hr>
<blockquote>
<p>notice级别报警会生成大量日志，测试完成后记得及时关闭日志输出。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用nginx服务器时，时常用到nginx的伪静态URL重新功能，由于重新条件太多或者书写条件有问题，导致无法正确匹配，要想排查问题，就需要开启nginx的rewrite_log日志，便于查找问题所在。</p>
<p>rewrite_log官方介绍如下：<br><figu]]>
    </summary>
    
      <category term="nginx" scheme="http://www.yuzhewo.com/tags/nginx/"/>
    
      <category term="rewrite" scheme="http://www.yuzhewo.com/tags/rewrite/"/>
    
      <category term="服务器相关" scheme="http://www.yuzhewo.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo主题maupassant添加CNZZ统计]]></title>
    <link href="http://www.yuzhewo.com/2015/11/01/Hexo%E4%B8%BB%E9%A2%98maupassant%E6%B7%BB%E5%8A%A0CNZZ%E7%BB%9F%E8%AE%A1/"/>
    <id>http://www.yuzhewo.com/2015/11/01/Hexo主题maupassant添加CNZZ统计/</id>
    <published>2015-11-01T01:55:09.000Z</published>
    <updated>2015-11-01T07:14:09.000Z</updated>
    <content type="html"><![CDATA[<p>安装好Hexo博客之后，想要给博客加一下统计代码，国内比较流行的统计代码有51la、cnzz、baidu、腾讯统计等，根据使用习惯和功能来看，比较习惯于CNZZ的统计后台使用，所以选择了CNZZ。</p>
<p>确定好统计代码用CNZZ之后，就要动手添加了，为了让全站页面都被统计到，当然应该把统计代码加到模板中的base页面或者footer页脚。但是网上查到的修改教程都是针对于ejs模板的修改，而maupassant这个主题是基于jade的。</p>
<p>但是添加模板区块的大致流程是一样的，无外乎以下几个步骤：</p>
<ol>
<li>在_config.yml中开启统计 例如：cnzz: true</li>
<li>在模板中根据配置判断，加载显示统计代码</li>
<li>由于CNZZ默认会显示一个图标，与网站风格不符，需要隐藏掉</li>
</ol>
<p>上面步骤是一般的流程，优点在于可以控制统计代码关闭，当然如果模板只想自己使用，可以直接在模板中写死，省时省力。</p>
<p>首先呢，你得先去申请一个统计代码[<a href="http://zhanzhang.cnzz.com/" target="_blank" rel="external">http://zhanzhang.cnzz.com/</a>]</p>
<p>修改配置文件<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Analytics</span></span><br><span class="line">analytics:</span><br><span class="line">  cnzz: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>之所以写两级配置是为了可以插入多个统计</p>
<p>接着进行模板的修改，在主题目录下的layout文件加下，新建一个analytics.jade文件，在文件中新建如下代码<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.analytics</span><br><span class="line">  <span class="keyword">if</span> theme.analytics.cnzz</span><br><span class="line">    script.</span><br><span class="line">      var cnzz_protocol = ((<span class="string">"https:"</span> == document.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);</span><br><span class="line">      document.<span class="keyword">write</span>(unescape(<span class="string">"<span class="variable">%3Cspan</span> id='cnzz_stat_icon_XXXXXXXXXX'<span class="variable">%3E</span><span class="variable">%3C</span>/span<span class="variable">%3E</span><span class="variable">%3Cscript</span> src='"</span> + cnzz_protocol + <span class="string">"s4.cnzz.com/z_stat.php<span class="variable">%3Fid</span><span class="variable">%3DXXXXXXXXXX</span><span class="variable">%26show</span><span class="variable">%3Dpic</span>' type='text/javascript'<span class="variable">%3E</span><span class="variable">%3C</span>/script<span class="variable">%3E</span>"</span>));</span><br></pre></td></tr></table></figure></p>
<p>上面代码表示的意思为，建一div标签，class为analytics，然后判断配置中analytics.cnzz是否为true，如果开启，则显示一个script标签，其内容为在CNZZ后台获得的js，需要把script标签去掉，其他部分无需修改</p>
<p>然后在base.jade文件中引入新建的区块<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">include</span> _partial/analytics</span></span><br></pre></td></tr></table></figure></p>
<p>至此统计代码即以引入页面，只不过会有一个CNZZ的图标，这个我是觉对不能忍的，如果你不在意，则下面步骤可跳过</p>
<p>最后通过样式把统计图标隐藏掉<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.analytics</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>此模板中样式为scss，有时修改无法生效，需要清缓存后才会生成最终CSS，可以之前clean命令清除缓存<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> clean</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<p>至此，统计代码添加完成，ejs模板修改步骤类似，网上资料众多，两者唯一不同在于语法，稍微了解即可做模板修改的简单工作了~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>安装好Hexo博客之后，想要给博客加一下统计代码，国内比较流行的统计代码有51la、cnzz、baidu、腾讯统计等，根据使用习惯和功能来看，比较习惯于CNZZ的统计后台使用，所以选择了CNZZ。</p>
<p>确定好统计代码用CNZZ之后，就要动手添加了，为了让全站页面都]]>
    </summary>
    
      <category term="CNZZ" scheme="http://www.yuzhewo.com/tags/CNZZ/"/>
    
      <category term="Hexo" scheme="http://www.yuzhewo.com/tags/Hexo/"/>
    
      <category term="maupassant" scheme="http://www.yuzhewo.com/tags/maupassant/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[XML中CDATA的作用]]></title>
    <link href="http://www.yuzhewo.com/2015/10/29/XML%E4%B8%ADCDATA%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://www.yuzhewo.com/2015/10/29/XML中CDATA的作用/</id>
    <published>2015-10-29T03:47:47.000Z</published>
    <updated>2015-11-03T00:19:29.000Z</updated>
    <content type="html"><![CDATA[<p>操作XML文件时，如果允许用户输入内容，例如∶”&lt;”、”&gt;”、”/“、””等，当生成XML时，会破坏了XML结构，使数据中断。</p>
<p>这就要用XML CDATA</p>
<p>在XML文档中的所有文本都会被解析器解析。</p>
<p>只有在CDATA部件之内的文本会被解析器忽略。</p>
<h2 id="解析数据">解析数据</h2><p>XML 解析器通常情况下会处理XML文档中的所有文本。</p>
<p>当XML元素被解析的时候，XML元素内部的文本也会被解析:</p>
<p>&lt; message&gt;This text is also parsed&lt; /message&gt;</p>
<p>XML解析器这样做的原因是XML元素内部可能还包含了别的元素，像下面的例子，name元素内部包含了first和last两个元素:</p>
<p>&lt; name&gt;&lt; first&gt;Bill&lt; /first&gt;&lt; last&gt;Gates&lt; /last&gt;&lt; /name&gt;</p>
<p>解析器会认为上面的代码是这样的:</p>
<p>&lt; name&gt;<br>&lt; first&gt;Bill&lt; /first&gt;<br>&lt; last&gt;Gates&lt; /last&gt;<br>&lt; /name&gt;</p>
<h2 id="转义字符">转义字符</h2><p>不合法的XML字符必须被替换为相应的实体。</p>
<p>如果在XML文档中使用类似”&lt; “ 的字符, 那么解析器将会出现错误，因为解析器会认为这是一个新元素的开始。所以不应该象下面那样书写代码:</p>
<p>&lt; message&gt;if salary &lt; 1000 then&lt; /message&gt;</p>
<p>为了避免出现这种情况，必须将字符”&lt; “ 转换成实体，象下面这样:</p>
<p>&lt; message&gt;if salary &amp;lt 1000 then&lt; /message&gt;</p>
<p>下面是五个在XML文档中预定义好的实体:</p>
<p>小于号 大于号 &amp; 单引号 双引号</p>
<p>实体必须以符号”&amp;”开头，以符号”;”结尾。<br>注意: 只有”&lt; “ 字符和”&amp;”字符对于XML来说是严格禁止使用的。剩下的都是合法的，为了减少出错，使用实体是一个好习惯。</p>
<h2 id="CDATA部件">CDATA部件</h2><p>在CDATA内部的所有内容都会被解析器忽略。</p>
<p>某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。</p>
<p>CDATA 部分中的所有内容都会被解析器忽略。</p>
<p>CDATA 部分由 “&lt;![CDATA[“ 开始，由 “]]&gt;” 结束：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt; <span class="attribute">script</span>&gt;</span>  </span><br><span class="line"><span class="cdata">&lt;![CDATA[  </span><br><span class="line">function matchwo(a,b) </span><br><span class="line"></span></span><span class="expression">&#123; </span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> (<span class="variable">a</span> &lt; <span class="variable">b</span> &amp;&amp; <span class="variable">a</span> &lt; 0) <span class="variable">then</span> </span><br><span class="line">  &#123; </span><br><span class="line">  <span class="variable">return</span> 1; </span><br><span class="line">  &#125;</span><span class="xml"><span class="cdata"> </span><br><span class="line">else </span><br><span class="line">  </span></span><span class="expression">&#123; </span><br><span class="line">  <span class="variable">return</span> 0; </span><br><span class="line">  &#125;</span><span class="xml"><span class="cdata"> </span><br><span class="line">&#125; </span><br><span class="line">]]&gt;</span></span><br><span class="line"><span class="tag">&lt;/ <span class="attribute">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在上面的例子中，解析器会忽略 CDATA 部分中的所有内容。</p>
<p>关于 CDATA 部分的注释：</p>
<p>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。</p>
<p>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>操作XML文件时，如果允许用户输入内容，例如∶”&lt;”、”&gt;”、”/“、””等，当生成XML时，会破坏了XML结构，使数据中断。</p>
<p>这就要用XML CDATA</p>
<p>在XML文档中的所有文本都会被解析器解析。</p>
<p>只有在CDATA部件]]>
    </summary>
    
      <category term="CDATA" scheme="http://www.yuzhewo.com/tags/CDATA/"/>
    
      <category term="XML" scheme="http://www.yuzhewo.com/tags/XML/"/>
    
      <category term="编程基础" scheme="http://www.yuzhewo.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在Mac电脑上安装Octopress]]></title>
    <link href="http://www.yuzhewo.com/2015/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Mac%E7%94%B5%E8%84%91%E4%B8%8A%E5%AE%89%E8%A3%85Octopress/"/>
    <id>http://www.yuzhewo.com/2015/10/27/如何在Mac电脑上安装Octopress/</id>
    <published>2015-10-27T05:53:26.000Z</published>
    <updated>2015-11-01T07:13:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="环境的配置">环境的配置</h3><p>本地安装Octopress仅需要Git与Ruby两个软件  </p>
<p>Git环境监测<br><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">git version <span class="number">2.3</span>.<span class="number">2</span> (Apple Git-<span class="number">55</span>)</span><br></pre></td></tr></table></figure></p>
<p>Ruby环境监测<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby --version       </span><br><span class="line">ruby <span class="number">2.0</span><span class="number">.0</span>p481 (<span class="number">2014</span>-<span class="number">05</span>-<span class="number">08</span> revision <span class="number">45883</span>) [universal.x86_64-darwin14]</span><br></pre></td></tr></table></figure></p>
<p>如果提示未发现命令，自行查找安装方式  </p>
<h3 id="安装Octopress">安装Octopress</h3><p>1、克隆Octopress代码到本地<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="string">git:</span><span class="comment">//github.com/imathis/octopress.git octopress</span></span><br><span class="line">Cloning into <span class="string">'octopress'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">10795</span>, done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">10795</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">10795</span></span><br><span class="line">Receiving <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10795</span><span class="regexp">/10795), 2.84 MiB | 23.00 KiB/</span>s, done.</span><br><span class="line">Resolving <span class="string">deltas:</span> <span class="number">100</span>% (<span class="number">5192</span>/<span class="number">5192</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure></p>
<p>2、切换到octopress目录，安装bundler<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(master) sudo gem install bundler</span><br><span class="line">Fetching: bundler-<span class="number">1.9</span><span class="number">.9</span>.gem (<span class="number">100</span>%)</span><br><span class="line">Successfully installed bundler-<span class="number">1.9</span><span class="number">.9</span></span><br><span class="line">Parsing documentation <span class="keyword">for</span> bundler-<span class="number">1.9</span><span class="number">.9</span></span><br><span class="line">Installing ri documentation <span class="keyword">for</span> bundler-<span class="number">1.9</span><span class="number">.9</span></span><br><span class="line">Done installing documentation <span class="keyword">for</span> bundler after <span class="number">5</span> seconds</span><br><span class="line"><span class="number">1</span> gem installed</span><br></pre></td></tr></table></figure></p>
<p>3、执行bundler安装命令，会执行速度非常慢<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">octopress <span class="string">git:</span>(master) bundler install</span><br><span class="line">Fetching gem metadata from <span class="string">https:</span><span class="comment">//rubygems.org/.........</span></span><br></pre></td></tr></table></figure></p>
<p>打开项目目录下的Gemfile文件，修改gem源为<a href="http://ruby.taobao.org" target="_blank" rel="external">http://ruby.taobao.org</a> ，然后再次执行命令<br><figure class="highlight"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#34;http://ruby.taobao.org&#34;</span><br></pre></td></tr></table></figure></p>
<p>3、安装默认主题<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(master) ✗ rake <span class="operator"><span class="keyword">install</span></span><br><span class="line">## Copying classic theme <span class="keyword">into</span> ./<span class="keyword">source</span> <span class="keyword">and</span> ./sass</span><br><span class="line">mkdir -<span class="keyword">p</span> <span class="keyword">source</span></span><br><span class="line">cp -r .themes/classic/<span class="keyword">source</span>/. <span class="keyword">source</span></span><br><span class="line">mkdir -<span class="keyword">p</span> sass</span><br><span class="line">cp -r .themes/classic/sass/. sass</span><br><span class="line">mkdir -<span class="keyword">p</span> <span class="keyword">source</span>/_posts</span><br><span class="line">mkdir -<span class="keyword">p</span> <span class="keyword">public</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="生成博客页与单页">生成博客页与单页</h3><p>生成静态页面<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(master) ✗ rake <span class="keyword">generate</span>   </span><br><span class="line">## Generating Site <span class="keyword">with</span> Jekyll</span><br><span class="line">directory source/stylesheets</span><br><span class="line">    write source/stylesheets/screen.css</span><br><span class="line"><span class="keyword">Configuration</span> <span class="keyword">file</span>: /Users/yuzhiguo/Source/GitHub/octopress/_config.yml</span><br><span class="line">            Source: source</span><br><span class="line">       Destination: public</span><br><span class="line">      Generating... </span><br><span class="line">                    done.</span><br><span class="line"> Auto-regeneration: disabled. <span class="keyword">Use</span> <span class="comment">--watch to enable.</span></span><br></pre></td></tr></table></figure></p>
<p>开启预览服务<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">octopress git:(source) ✗ rake preview</span><br><span class="line">Starting <span class="keyword">to</span> watch source <span class="keyword">with</span> Jekyll <span class="keyword">and</span> Compass. Starting Rack <span class="keyword">on</span> <span class="keyword">port</span> <span class="number">4000</span></span><br><span class="line"><span class="keyword">Configuration</span> <span class="keyword">file</span>: /Users/yuzhiguo/Source/octopress/_config.yml</span><br><span class="line">&gt;&gt;&gt; Compass <span class="keyword">is</span> watching <span class="keyword">for</span> changes. Press Ctrl-C <span class="keyword">to</span> Stop.</span><br></pre></td></tr></table></figure></p>
<p>在浏览器中输入：<a href="http://127.0.0.1:4000" target="_blank" rel="external">http://127.0.0.1:4000</a></p>
<p>参考网站：<br><a href="http://ruby.taobao.org/" target="_blank" rel="external">http://ruby.taobao.org/</a><br><a href="http://octopress.org/docs/setup/" target="_blank" rel="external">http://octopress.org/docs/setup/</a><br><a href="https://git-scm.com/download/mac" target="_blank" rel="external">https://git-scm.com/download/mac</a><br><a href="https://www.ruby-lang.org/en/documentation/installation/#homebrew" target="_blank" rel="external">https://www.ruby-lang.org/en/documentation/installation/#homebrew</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="环境的配置">环境的配置</h3><p>本地安装Octopress仅需要Git与Ruby两个软件  </p>
<p>Git环境监测<br><figure class="highlight bash"><figcaption><span>bash</span></f]]>
    </summary>
    
      <category term="Mac" scheme="http://www.yuzhewo.com/tags/Mac/"/>
    
      <category term="Octopress" scheme="http://www.yuzhewo.com/tags/Octopress/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是Octopress]]></title>
    <link href="http://www.yuzhewo.com/2015/10/27/%E4%BB%80%E4%B9%88%E6%98%AFOctopress/"/>
    <id>http://www.yuzhewo.com/2015/10/27/什么是Octopress/</id>
    <published>2015-10-27T05:51:05.000Z</published>
    <updated>2015-11-01T07:13:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是Octopress">什么是Octopress</h3><p>Octopress 是一个基于Jekyll的静态博客站点生成系统，它很大程度上简化了用Jekyll搭建博客的过程。</p>
<p>相对于WordPress来说优势：</p>
<blockquote>
<ul>
<li>不依赖于数据库，不存在数据库崩溃导致数据丢失的问题。</li>
<li>可以直接部署在github上的免费空间内。</li>
<li>无过多功能模块，没有用户系统等无关内容的功能。</li>
<li>纯静态页面，加载速度快。</li>
<li>使用markdown语法书写博客。</li>
<li>代码存放在github上，不存在数据丢失问题。</li>
</ul>
</blockquote>
<p>A blogging framework for hackers.</p>
<p>一个非常适合程序员使用的博客系统</p>
<p>使用流程</p>
<p>搭建环境 -&gt; 纯文本书写博客 -&gt; 生成静态网页 -&gt; 本地预览 -&gt; 部署</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是Octopress">什么是Octopress</h3><p>Octopress 是一个基于Jekyll的静态博客站点生成系统，它很大程度上简化了用Jekyll搭建博客的过程。</p>
<p>相对于WordPress来说优势：</p>
<blockquote]]>
    </summary>
    
      <category term="Octopress" scheme="http://www.yuzhewo.com/tags/Octopress/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[欢迎光临本站]]></title>
    <link href="http://www.yuzhewo.com/2015/10/27/%E6%AC%A2%E8%BF%8E%E5%85%89%E4%B8%B4%E6%9C%AC%E7%AB%99/"/>
    <id>http://www.yuzhewo.com/2015/10/27/欢迎光临本站/</id>
    <published>2015-10-27T05:00:26.000Z</published>
    <updated>2015-11-01T07:13:46.000Z</updated>
    <content type="html"><![CDATA[<p>欢迎使用<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! 这是这是一篇示例发布。 更多信息请查看<a href="http://hexo.io/docs/" target="_blank" rel="external">官方文档</a>。使用过程中发现任何问题，欢迎反馈<a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">问题反馈</a>或者在项目主要提出问题<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>。</p>
<h2 id="快速入门">快速入门</h2><h3 id="新建一篇文章">新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="启动预览服务">启动预览服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="生成静态文件">生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="部署博客到远端服务器">部署博客到远端服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>欢迎使用<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! 这是这是一篇示例发布。 更多信息请查看<a href="http://hexo.io/docs/" target="_blank" ]]>
    </summary>
    
      <category term="Hexo" scheme="http://www.yuzhewo.com/tags/Hexo/"/>
    
      <category term="业余爱好" scheme="http://www.yuzhewo.com/categories/%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
</feed>
